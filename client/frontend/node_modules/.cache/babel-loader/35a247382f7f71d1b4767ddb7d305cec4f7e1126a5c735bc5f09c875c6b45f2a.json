{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// //import { FaTrash } from 'react-icons/fa';\n// import { useNavigate, Routes, Route } from \"react-router-dom\";\n\n// import TreatmentScreen from \"./components/TreatmentScreen\";\n\n// import HomeScreen from \"./components/HomeScreen\";\n// import ChatWindow from \"./components/ChatWindow\";\n// import MessageInput from \"./components/MessageInput\";\n// import VoiceRecorder from \"./components/VoiceRecorder\";\n// import LocationFetcher from \"./components/LocationFetcher\";\n// import ImageCapture from \"./components/ImageCapture\";\n// // import Instructions from \"./components/Instructions\";\n// //import Modal from \"./components/Modal\";\n// import \"./App.css\";\n\n// function App() {\n//   const navigate = useNavigate();\n\n//   const [showChat, setShowChat] = useState(false);\n//   const [treatmentParams, setTreatmentParams] = useState(null);\n//   const [inputMsg, setInputMsg] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [history, setHistory] = useState([]);\n//   //const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [ambulance_flag, setAmbulance_flag] = useState(false);\n//   const [isFinalDecision, setIsFinalDecision] = useState(false);\n//   const [locationSent, setLocationSent] = useState(false);\n//   const [showImageCapture, setShowImageCapture] = useState(false);\n//   const [burnsDetected, setBurnsDetected] = useState(null);\n//   // const [showInstructions, setShowInstructions] = useState(false);\n//   // פונקציה זהה בזיכרון בין רינדורים\n//   const handleLocation = useCallback((coords) => {\n//     const { lat, lng } = coords;\n//     const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n//     // שמירה כהודעה בצ'אט\n//     setMessages((prev) => [\n//       ...prev,\n//       {\n//         text: \"I found this location on Google Maps:\",\n//         fromUser: false,\n//       },\n//       {\n//         text: mapsUrl,\n//         fromUser: false,\n//         isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n//       },\n//       {\n//         text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n//         fromUser: false,\n//       },\n//     ]);\n\n//     // שליחה לשרת\n//     fetch(`${process.env.REACT_APP_API_URL}/location`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(coords),\n//     }).catch((err) => console.error(\"Error sending location:\", err));\n\n//     // מונע שליחה חוזרת\n//     setLocationSent(true);\n//   }, []);\n\n//   const sendRequest = async () => {\n//     if (!inputMsg.trim() || isFinalDecision) return;\n//     console.log(5);\n//     const userMessage = { text: inputMsg, fromUser: true };\n//     setMessages((prev) => [...prev, userMessage]);\n//     //setIsModalOpen(true);\n//     const newHistory = [...history, inputMsg];\n//     setHistory(newHistory);\n\n//     try {\n//       setIsLoading(true);\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           history: newHistory,\n//           ambulance_flag: ambulance_flag,\n//         }),\n//       });\n\n//       if (!res.ok) {\n//         throw new Error(\"Server error\");\n//       }\n\n//       const data = await res.json();\n//       const answer = data?.result || \"Error: No result received\";\n//       const ambulanceFlag = data?.ambulance_flag || false;\n//       const finalDecisionFlag = data?.has_decision || false;\n//       if (data?.request_image) {\n//         console.log(\"Server requested an image. Opening camera...\");\n//         setShowImageCapture(true);\n//       }\n//       // if (data.burns_detected) {\n//       //   setBurnsDetected(data.burns_detected);\n//       //   setShowImageCapture(true);\n//       // } else {\n//       //   setBurnsDetected(null);\n//       // }\n//       const newMessages = [\n//         { text: answer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ];\n//       setMessages((prev) => [...prev, ...newMessages]);\n//       // setAmbulance_flag(ambulanceFlag)\n//       // setHistory(newHistory);\n//       setInputMsg(\"\");\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//        if (finalDecisionFlag) {\n//        setTreatmentParams({ caseType: answer, degree: data.degree ?? undefined });\n//     }\n//     } catch (error) {\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: \"Error contacting server\", fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const newChat = () => {\n//     setMessages([]);\n//     setHistory([]);\n//     setInputMsg(\"\");\n//     setAmbulance_flag(false);\n//     setIsFinalDecision(false);\n//     setLocationSent(false);\n//     setShowImageCapture(false);\n//   };\n\n//   const handleSendAudio = async (blob) => {\n//     console.log(\"Audio MIME type:\", blob.type);\n//     console.log(\"Audio size:\", blob.size, \"bytes\");\n\n//     const url = URL.createObjectURL(blob);\n//     const audioMessage = { audioUrl: url, fromUser: true };\n//     setMessages((prev) => [...prev, audioMessage]);\n//     // setHistory((prev) => [...prev, transcript]);\n\n//     const formData = new FormData();\n//     formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n//     try {\n//       setIsLoading(true);\n//       console.log(\n//         \"Sending audio to:\",\n//         `${process.env.REACT_APP_API_URL}/audio`\n//       );\n\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!res.ok) {\n//         const errorText = await res.text();\n//         console.error(\"Server response:\", res.status, errorText);\n//         throw new Error(`Server error: ${res.status} ${errorText}`);\n//       }\n\n//       const data = await res.json();\n//       console.log(\"Server response data:\", data);\n\n//       const transcript = data?.transcript || \"\";\n//       const initialAnswer = data?.result || \"\";\n//       console.log(\"Transcript:\", transcript);\n//       console.log(\"Initial answer:\", initialAnswer);\n\n//       setMessages((prev) =>\n//         prev.map((msg) =>\n//           msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n//         )\n//       );\n//       // setMessages((prev) => [\n//       //   ...prev,\n//       //   { text: initialAnswer, fromUser: false },\n//       // ]);\n//       // setHistory((prev) => [...prev, initialAnswer]);\n\n//       // Send history including the transcript in a separate query\n//       const newHistory = [...history, transcript];\n//       const predictRes = await fetch(\n//         `${process.env.REACT_APP_API_URL}/predict`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             history: newHistory,\n//             ambulance_flag: ambulance_flag,\n//           }),\n//         }\n//       );\n\n//       if (!predictRes.ok) {\n//         const errorText = await predictRes.text();\n//         console.error(\"Predict response:\", predictRes.status, errorText);\n//         throw new Error(\n//           `Server error on predict: ${predictRes.status} ${errorText}`\n//         );\n//       }\n\n//       const predictData = await predictRes.json();\n//       const finalAnswer = predictData?.result || \"Error: No result received\";\n//       const finalDecisionFlag = predictData?.has_decision || false;\n//       const ambulanceFlag = predictData?.ambulance_flag || false;\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: finalAnswer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ]);\n\n//       setHistory(newHistory);\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//     } catch (error) {\n//       console.error(\"Error in handleSendAudio:\", error);\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: `Error contacting server: ${error.message}`, fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   if (!showChat) {\n//     return <HomeScreen onStartChat={() => setShowChat(true)} />;\n//  }\n// //   return (\n// //     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n// //       <h1>ResQPal Chat</h1>\n// //       <ChatWindow messages={messages} />\n// //       <MessageInput\n// //         inputMsg={inputMsg}\n// //         setInputMsg={setInputMsg}\n// //         onSend={sendRequest}\n// //         disabled={isLoading || isFinalDecision}\n// //       />\n// //       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n// //       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n// //       {/* {ambulance_flag && isFinalDecision && (\n// //         <LocationFetcher\n// //           onLocation={(coords) => {\n// //             const { lat, lng } = coords;\n\n// //             // שמירה כהודעה בצ'אט\n// //             setMessages((prev) => [\n// //               ...prev,\n// //               {\n// //                 text: \"Sending your location to emergency services...\",\n// //                 fromUser: false,\n// //               },\n// //               {\n// //                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n// //                 fromUser: true,\n// //               },\n// //             ]);\n\n// //             // שליחה לשרת\n// //             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify(coords),\n// //             }).catch((err) => console.error(\"Error sending location:\", err));\n// //           }}\n// //         />\n// //       )} */}\n// //       {showImageCapture && (\n// //         <ImageCapture\n// //           burnsDetected={burnsDetected}\n// //           onCancel={() => {\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //           }}\n// //           onCapture={(result) => {\n// //             console.log(\"Image capture result:\", result);\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n// //           }}\n// //         />\n// //       )}\n\n// //       {ambulance_flag && isFinalDecision && !locationSent && (\n// //         <LocationFetcher onLocation={handleLocation} />\n// //       )}\n// //       {/* {!showInstructions && (\n// //         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n// //       )} */}\n\n// //       {showInstructions && (\n// //         <Instructions onClose={() => setShowInstructions(false)} />\n// //       )}\n// //       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n// //         Start New Chat\n// //       </button>\n// //     </div>\n// //   );\n// // }\n// // export default App;\n//  return (\n//     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n//       <h1>ResQPal Chat</h1>\n//       <ChatWindow messages={messages} />\n//       <MessageInput\n//         inputMsg={inputMsg}\n//         setInputMsg={setInputMsg}\n//         onSend={sendRequest}\n//         disabled={isLoading || isFinalDecision}\n//       />\n//       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n//       {ambulance_flag && isFinalDecision && !locationSent && <LocationFetcher onLocation={handleLocation} />}\n//       {showImageCapture && (\n//         <ImageCapture\n//           burnsDetected={burnsDetected}\n//           onCancel={() => {\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//           }}\n//           onCapture={(result) => {\n//             setMessages((prev) => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n//             setShowImageCapture(false);\n//           }}\n//         />\n//       )}\n\n//       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n//         Start New Chat\n//       </button>\n\n//       {/* כפתור ניווט להוראות טיפול, מנוטרל עד שיש החלטה סופית */}\n//       <button\n//         onClick={() => navigate(\"/treatment\")}\n//         disabled={!isFinalDecision}\n//         style={{\n//           marginTop: \"1rem\",\n//           marginLeft: \"1rem\",\n//           opacity: isFinalDecision ? 1 : 0.5,\n//           cursor: isFinalDecision ? \"pointer\" : \"not-allowed\",\n//         }}\n//       >\n//         Go to Treatment Instructions\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default function AppWrapper() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/treatment\" element={<TreatmentScreen />} />\n//         <Route path=\"/*\" element={<App />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\nimport React, { useState, useCallback } from \"react\";\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\nimport ImageCapture from \"./components/ImageCapture\";\nimport TreatmentScreen from \"./components/TreatmentScreen\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApp() {\n  _s();\n  const navigate = useNavigate();\n  const [showChat, setShowChat] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [burnsDetected, setBurnsDetected] = useState(null);\n  const handleLocation = useCallback(coords => {\n    const {\n      lat,\n      lng\n    } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    setMessages(prev => [...prev, {\n      text: \"I found this location on Google Maps:\",\n      fromUser: false\n    }, {\n      text: mapsUrl,\n      fromUser: false,\n      isLink: true\n    }, {\n      text: \"Is this correct? If not, please enter it manually.\",\n      fromUser: false\n    }]);\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(coords)\n    }).catch(console.error);\n    setLocationSent(true);\n  }, []);\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    setMessages(prev => [...prev, {\n      text: inputMsg,\n      fromUser: true\n    }]);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag\n        })\n      });\n      if (!res.ok) throw new Error(\"Server error\");\n      const data = await res.json();\n\n      // show answer + ambulance alert\n      setMessages(prev => [...prev, {\n        text: data.result,\n        fromUser: false\n      }, ...(data.ambulance_flag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])]);\n      setAmbulance_flag(data.ambulance_flag);\n      setIsFinalDecision(data.has_decision);\n      setInputMsg(\"\");\n\n      // if final decision, store for treatment screen\n      if (data.has_decision) {\n        var _data$degree;\n        setTreatmentParams({\n          caseType: data.label || data.result,\n          degree: (_data$degree = data.degree) !== null && _data$degree !== void 0 ? _data$degree : undefined\n        });\n      }\n      if (data.request_image) {\n        setShowImageCapture(true);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n    setTreatmentParams(null);\n  };\n  const handleSendAudio = async blob => {\n    // ... identical to above sendRequest logic for audio ...\n  };\n  if (!showChat) {\n    return /*#__PURE__*/_jsxDEV(HomeScreen, {\n      onStartChat: () => setShowChat(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ResQPal Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      inputMsg: inputMsg,\n      setInputMsg: setInputMsg,\n      onSend: sendRequest,\n      disabled: isLoading || isFinalDecision\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this), !isFinalDecision && /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n      onSendAudio: handleSendAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 28\n    }, this), ambulance_flag && isFinalDecision && !locationSent && /*#__PURE__*/_jsxDEV(LocationFetcher, {\n      onLocation: handleLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this), showImageCapture && /*#__PURE__*/_jsxDEV(ImageCapture, {\n      burnsDetected: burnsDetected,\n      onCancel: () => setShowImageCapture(false),\n      onCapture: result => {\n        setMessages(prev => [...prev, {\n          text: `Image result: ${result}`,\n          fromUser: false\n        }]);\n        setShowImageCapture(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newChat,\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: \"Start New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (!treatmentParams) return;\n        const {\n          caseType,\n          degree\n        } = treatmentParams;\n        let url = `/treatment?case_type=${encodeURIComponent(caseType)}&count=0`;\n        if (degree !== undefined) url += `&degree=${degree}`;\n        navigate(url);\n      },\n      disabled: !treatmentParams,\n      style: {\n        marginLeft: \"1rem\",\n        marginTop: \"1rem\",\n        opacity: treatmentParams ? 1 : 0.5,\n        cursor: treatmentParams ? \"pointer\" : \"not-allowed\"\n      },\n      children: \"\\u05D4\\u05D5\\u05E8\\u05D0\\u05D5\\u05EA \\u05D8\\u05D9\\u05E4\\u05D5\\u05DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 491,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatApp, \"U+3OhLWy6NZre3AiQTzHiO4PXpQ=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatApp;\nexport default function AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(ChatApp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/treatment\",\n      element: /*#__PURE__*/_jsxDEV(TreatmentScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AppWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatApp\");\n$RefreshReg$(_c2, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useCallback","useNavigate","Routes","Route","HomeScreen","ChatWindow","MessageInput","VoiceRecorder","LocationFetcher","ImageCapture","TreatmentScreen","jsxDEV","_jsxDEV","ChatApp","_s","navigate","showChat","setShowChat","treatmentParams","setTreatmentParams","inputMsg","setInputMsg","messages","setMessages","history","setHistory","isLoading","setIsLoading","ambulance_flag","setAmbulance_flag","isFinalDecision","setIsFinalDecision","locationSent","setLocationSent","showImageCapture","setShowImageCapture","burnsDetected","setBurnsDetected","handleLocation","coords","lat","lng","mapsUrl","prev","text","fromUser","isLink","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","catch","console","error","sendRequest","trim","newHistory","res","ok","Error","data","json","result","isAmbulanceAlert","has_decision","_data$degree","caseType","label","degree","undefined","request_image","newChat","handleSendAudio","blob","onStartChat","fileName","_jsxFileName","lineNumber","columnNumber","style","maxWidth","margin","padding","children","onSend","disabled","onSendAudio","onLocation","onCancel","onCapture","onClick","marginTop","url","encodeURIComponent","marginLeft","opacity","cursor","_c","AppWrapper","path","element","_c2","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/App.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// //import { FaTrash } from 'react-icons/fa';\n// import { useNavigate, Routes, Route } from \"react-router-dom\";\n\n// import TreatmentScreen from \"./components/TreatmentScreen\";\n\n// import HomeScreen from \"./components/HomeScreen\";\n// import ChatWindow from \"./components/ChatWindow\";\n// import MessageInput from \"./components/MessageInput\";\n// import VoiceRecorder from \"./components/VoiceRecorder\";\n// import LocationFetcher from \"./components/LocationFetcher\";\n// import ImageCapture from \"./components/ImageCapture\";\n// // import Instructions from \"./components/Instructions\";\n// //import Modal from \"./components/Modal\";\n// import \"./App.css\";\n\n// function App() {\n//   const navigate = useNavigate();\n  \n//   const [showChat, setShowChat] = useState(false);\n//   const [treatmentParams, setTreatmentParams] = useState(null);\n//   const [inputMsg, setInputMsg] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [history, setHistory] = useState([]);\n//   //const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [ambulance_flag, setAmbulance_flag] = useState(false);\n//   const [isFinalDecision, setIsFinalDecision] = useState(false);\n//   const [locationSent, setLocationSent] = useState(false);\n//   const [showImageCapture, setShowImageCapture] = useState(false);\n//   const [burnsDetected, setBurnsDetected] = useState(null);\n//   // const [showInstructions, setShowInstructions] = useState(false);\n//   // פונקציה זהה בזיכרון בין רינדורים\n//   const handleLocation = useCallback((coords) => {\n//     const { lat, lng } = coords;\n//     const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n//     // שמירה כהודעה בצ'אט\n//     setMessages((prev) => [\n//       ...prev,\n//       {\n//         text: \"I found this location on Google Maps:\",\n//         fromUser: false,\n//       },\n//       {\n//         text: mapsUrl,\n//         fromUser: false,\n//         isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n//       },\n//       {\n//         text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n//         fromUser: false,\n//       },\n//     ]);\n\n//     // שליחה לשרת\n//     fetch(`${process.env.REACT_APP_API_URL}/location`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(coords),\n//     }).catch((err) => console.error(\"Error sending location:\", err));\n\n//     // מונע שליחה חוזרת\n//     setLocationSent(true);\n//   }, []);\n\n//   const sendRequest = async () => {\n//     if (!inputMsg.trim() || isFinalDecision) return;\n//     console.log(5);\n//     const userMessage = { text: inputMsg, fromUser: true };\n//     setMessages((prev) => [...prev, userMessage]);\n//     //setIsModalOpen(true);\n//     const newHistory = [...history, inputMsg];\n//     setHistory(newHistory);\n\n//     try {\n//       setIsLoading(true);\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           history: newHistory,\n//           ambulance_flag: ambulance_flag,\n//         }),\n//       });\n\n//       if (!res.ok) {\n//         throw new Error(\"Server error\");\n//       }\n\n//       const data = await res.json();\n//       const answer = data?.result || \"Error: No result received\";\n//       const ambulanceFlag = data?.ambulance_flag || false;\n//       const finalDecisionFlag = data?.has_decision || false;\n//       if (data?.request_image) {\n//         console.log(\"Server requested an image. Opening camera...\");\n//         setShowImageCapture(true);\n//       }\n//       // if (data.burns_detected) {\n//       //   setBurnsDetected(data.burns_detected);\n//       //   setShowImageCapture(true);\n//       // } else {\n//       //   setBurnsDetected(null);\n//       // }\n//       const newMessages = [\n//         { text: answer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ];\n//       setMessages((prev) => [...prev, ...newMessages]);\n//       // setAmbulance_flag(ambulanceFlag)\n//       // setHistory(newHistory);\n//       setInputMsg(\"\");\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//        if (finalDecisionFlag) {\n//        setTreatmentParams({ caseType: answer, degree: data.degree ?? undefined });\n//     }\n//     } catch (error) {\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: \"Error contacting server\", fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const newChat = () => {\n//     setMessages([]);\n//     setHistory([]);\n//     setInputMsg(\"\");\n//     setAmbulance_flag(false);\n//     setIsFinalDecision(false);\n//     setLocationSent(false);\n//     setShowImageCapture(false);\n//   };\n\n//   const handleSendAudio = async (blob) => {\n//     console.log(\"Audio MIME type:\", blob.type);\n//     console.log(\"Audio size:\", blob.size, \"bytes\");\n\n//     const url = URL.createObjectURL(blob);\n//     const audioMessage = { audioUrl: url, fromUser: true };\n//     setMessages((prev) => [...prev, audioMessage]);\n//     // setHistory((prev) => [...prev, transcript]);\n\n//     const formData = new FormData();\n//     formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n//     try {\n//       setIsLoading(true);\n//       console.log(\n//         \"Sending audio to:\",\n//         `${process.env.REACT_APP_API_URL}/audio`\n//       );\n\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!res.ok) {\n//         const errorText = await res.text();\n//         console.error(\"Server response:\", res.status, errorText);\n//         throw new Error(`Server error: ${res.status} ${errorText}`);\n//       }\n\n//       const data = await res.json();\n//       console.log(\"Server response data:\", data);\n\n//       const transcript = data?.transcript || \"\";\n//       const initialAnswer = data?.result || \"\";\n//       console.log(\"Transcript:\", transcript);\n//       console.log(\"Initial answer:\", initialAnswer);\n\n//       setMessages((prev) =>\n//         prev.map((msg) =>\n//           msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n//         )\n//       );\n//       // setMessages((prev) => [\n//       //   ...prev,\n//       //   { text: initialAnswer, fromUser: false },\n//       // ]);\n//       // setHistory((prev) => [...prev, initialAnswer]);\n\n//       // Send history including the transcript in a separate query\n//       const newHistory = [...history, transcript];\n//       const predictRes = await fetch(\n//         `${process.env.REACT_APP_API_URL}/predict`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             history: newHistory,\n//             ambulance_flag: ambulance_flag,\n//           }),\n//         }\n//       );\n\n//       if (!predictRes.ok) {\n//         const errorText = await predictRes.text();\n//         console.error(\"Predict response:\", predictRes.status, errorText);\n//         throw new Error(\n//           `Server error on predict: ${predictRes.status} ${errorText}`\n//         );\n//       }\n\n//       const predictData = await predictRes.json();\n//       const finalAnswer = predictData?.result || \"Error: No result received\";\n//       const finalDecisionFlag = predictData?.has_decision || false;\n//       const ambulanceFlag = predictData?.ambulance_flag || false;\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: finalAnswer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ]);\n\n//       setHistory(newHistory);\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//     } catch (error) {\n//       console.error(\"Error in handleSendAudio:\", error);\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: `Error contacting server: ${error.message}`, fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   if (!showChat) {\n//     return <HomeScreen onStartChat={() => setShowChat(true)} />;\n//  }\n// //   return (\n// //     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n// //       <h1>ResQPal Chat</h1>\n// //       <ChatWindow messages={messages} />\n// //       <MessageInput\n// //         inputMsg={inputMsg}\n// //         setInputMsg={setInputMsg}\n// //         onSend={sendRequest}\n// //         disabled={isLoading || isFinalDecision}\n// //       />\n// //       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n// //       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n// //       {/* {ambulance_flag && isFinalDecision && (\n// //         <LocationFetcher\n// //           onLocation={(coords) => {\n// //             const { lat, lng } = coords;\n\n// //             // שמירה כהודעה בצ'אט\n// //             setMessages((prev) => [\n// //               ...prev,\n// //               {\n// //                 text: \"Sending your location to emergency services...\",\n// //                 fromUser: false,\n// //               },\n// //               {\n// //                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n// //                 fromUser: true,\n// //               },\n// //             ]);\n\n// //             // שליחה לשרת\n// //             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify(coords),\n// //             }).catch((err) => console.error(\"Error sending location:\", err));\n// //           }}\n// //         />\n// //       )} */}\n// //       {showImageCapture && (\n// //         <ImageCapture\n// //           burnsDetected={burnsDetected}\n// //           onCancel={() => {\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //           }}\n// //           onCapture={(result) => {\n// //             console.log(\"Image capture result:\", result);\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n// //           }}\n// //         />\n// //       )}\n\n// //       {ambulance_flag && isFinalDecision && !locationSent && (\n// //         <LocationFetcher onLocation={handleLocation} />\n// //       )}\n// //       {/* {!showInstructions && (\n// //         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n// //       )} */}\n\n// //       {showInstructions && (\n// //         <Instructions onClose={() => setShowInstructions(false)} />\n// //       )}\n// //       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n// //         Start New Chat\n// //       </button>\n// //     </div>\n// //   );\n// // }\n// // export default App;\n//  return (\n//     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n//       <h1>ResQPal Chat</h1>\n//       <ChatWindow messages={messages} />\n//       <MessageInput\n//         inputMsg={inputMsg}\n//         setInputMsg={setInputMsg}\n//         onSend={sendRequest}\n//         disabled={isLoading || isFinalDecision}\n//       />\n//       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n//       {ambulance_flag && isFinalDecision && !locationSent && <LocationFetcher onLocation={handleLocation} />}\n//       {showImageCapture && (\n//         <ImageCapture\n//           burnsDetected={burnsDetected}\n//           onCancel={() => {\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//           }}\n//           onCapture={(result) => {\n//             setMessages((prev) => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n//             setShowImageCapture(false);\n//           }}\n//         />\n//       )}\n\n//       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n//         Start New Chat\n//       </button>\n\n//       {/* כפתור ניווט להוראות טיפול, מנוטרל עד שיש החלטה סופית */}\n//       <button\n//         onClick={() => navigate(\"/treatment\")}\n//         disabled={!isFinalDecision}\n//         style={{\n//           marginTop: \"1rem\",\n//           marginLeft: \"1rem\",\n//           opacity: isFinalDecision ? 1 : 0.5,\n//           cursor: isFinalDecision ? \"pointer\" : \"not-allowed\",\n//         }}\n//       >\n//         Go to Treatment Instructions\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default function AppWrapper() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/treatment\" element={<TreatmentScreen />} />\n//         <Route path=\"/*\" element={<App />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\nimport React, { useState, useCallback } from \"react\";\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\nimport ImageCapture from \"./components/ImageCapture\";\nimport TreatmentScreen from \"./components/TreatmentScreen\";\nimport \"./App.css\";\n\nfunction ChatApp() {\n  const navigate = useNavigate();\n\n  const [showChat, setShowChat] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [burnsDetected, setBurnsDetected] = useState(null);\n\n  const handleLocation = useCallback((coords) => {\n    const { lat, lng } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    setMessages(prev => [\n      ...prev,\n      { text: \"I found this location on Google Maps:\", fromUser: false },\n      { text: mapsUrl, fromUser: false, isLink: true },\n      { text: \"Is this correct? If not, please enter it manually.\", fromUser: false }\n    ]);\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(coords)\n    }).catch(console.error);\n    setLocationSent(true);\n  }, []);\n\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    setMessages(prev => [...prev, { text: inputMsg, fromUser: true }]);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ history: newHistory, ambulance_flag })\n      });\n      if (!res.ok) throw new Error(\"Server error\");\n      const data = await res.json();\n\n      // show answer + ambulance alert\n      setMessages(prev => [\n        ...prev,\n        { text: data.result, fromUser: false },\n        ...(data.ambulance_flag\n          ? [{ text: \"Ambulance required!\", fromUser: false, isAmbulanceAlert: true }]\n          : [])\n      ]);\n      setAmbulance_flag(data.ambulance_flag);\n      setIsFinalDecision(data.has_decision);\n      setInputMsg(\"\");\n\n      // if final decision, store for treatment screen\n      if (data.has_decision) {\n        setTreatmentParams({\n          caseType: data.label || data.result,\n          degree: data.degree ?? undefined\n        });\n      }\n      if (data.request_image) {\n        setShowImageCapture(true);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n    setTreatmentParams(null);\n  };\n\n  const handleSendAudio = async blob => {\n    // ... identical to above sendRequest logic for audio ...\n  };\n\n  if (!showChat) {\n    return <HomeScreen onStartChat={() => setShowChat(true)} />;\n  }\n\n  return (\n    <div style={{ maxWidth: 600, margin: \"0 auto\", padding: \"2rem\" }}>\n      <h1>ResQPal Chat</h1>\n      <ChatWindow messages={messages} />\n      <MessageInput\n        inputMsg={inputMsg}\n        setInputMsg={setInputMsg}\n        onSend={sendRequest}\n        disabled={isLoading || isFinalDecision}\n      />\n      {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n      {ambulance_flag && isFinalDecision && !locationSent && (\n        <LocationFetcher onLocation={handleLocation} />\n      )}\n      {showImageCapture && (\n        <ImageCapture\n          burnsDetected={burnsDetected}\n          onCancel={() => setShowImageCapture(false)}\n          onCapture={result => {\n            setMessages(prev => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n            setShowImageCapture(false);\n          }}\n        />\n      )}\n      <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n        Start New Chat\n      </button>\n      <button\n        onClick={() => {\n          if (!treatmentParams) return;\n          const { caseType, degree } = treatmentParams;\n          let url = `/treatment?case_type=${encodeURIComponent(caseType)}&count=0`;\n          if (degree !== undefined) url += `&degree=${degree}`;\n          navigate(url);\n        }}\n        disabled={!treatmentParams}\n        style={{\n          marginLeft: \"1rem\",\n          marginTop: \"1rem\",\n          opacity: treatmentParams ? 1 : 0.5,\n          cursor: treatmentParams ? \"pointer\" : \"not-allowed\"\n        }}\n      >\n        הוראות טיפול\n      </button>\n    </div>\n  );\n}\n\nexport default function AppWrapper() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<ChatApp />} />\n      <Route path=\"/treatment\" element={<TreatmentScreen />} />\n    </Routes>\n  );\n}\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,WAAW,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}