{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\n\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const sendRequest = async () => {\n    if (!inputMsg.trim()) return;\n    const userMessage = {\n      text: inputMsg,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory\n        })\n      });\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n      const data = await res.json();\n      const answer = (data === null || data === void 0 ? void 0 : data.result) || \"Error: No result received\";\n      setMessages(prev => [...prev, {\n        text: answer,\n        fromUser: false\n      }]);\n      setHistory([...newHistory, answer]);\n      setInputMsg(\"\");\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Error contacting server\",\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n  };\n  const handleSendAudio = async blob => {\n    const url = URL.createObjectURL(blob);\n    const audioMessage = {\n      audioUrl: url,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, audioMessage]);\n    setHistory(prev => [...prev, \"[Audio message sent]\"]);\n    const formData = new FormData();\n    formData.append(\"audio\", blob);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n      const data = await res.json();\n      const transcript = (data === null || data === void 0 ? void 0 : data.transcript) || \"\";\n      const initialAnswer = (data === null || data === void 0 ? void 0 : data.result) || \"\";\n      setMessages(prev => prev.map(msg => msg.audioUrl === url ? {\n        ...msg,\n        transcript: transcript\n      } : msg));\n      setMessages(prev => [...prev, {\n        text: initialAnswer,\n        fromUser: false\n      }]);\n      setHistory(prev => [...prev, initialAnswer]);\n      const predictRes = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: [...history, transcript]\n        })\n      });\n      if (!predictRes.ok) throw new Error(\"Server error on predict\");\n      const predictData = await predictRes.json();\n      const finalAnswer = (predictData === null || predictData === void 0 ? void 0 : predictData.result) || \"Error: No result received\";\n      setMessages(prev => [...prev, {\n        text: finalAnswer,\n        fromUser: false\n      }]);\n      setHistory(prev => [...prev, finalAnswer]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Error contacting server\",\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"600px\",\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ResQPal Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      inputMsg: inputMsg,\n      setInputMsg: setInputMsg,\n      onSend: sendRequest,\n      disabled: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n      onSendAudio: handleSendAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newChat,\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: \"Start New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"82Uef1zRVIwkKMR1+f4M0FtsmTU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatWindow","MessageInput","VoiceRecorder","jsxDEV","_jsxDEV","App","_s","inputMsg","setInputMsg","messages","setMessages","history","setHistory","isLoading","setIsLoading","sendRequest","trim","userMessage","text","fromUser","prev","newHistory","res","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","Error","data","json","answer","result","error","newChat","handleSendAudio","blob","url","URL","createObjectURL","audioMessage","audioUrl","formData","FormData","append","transcript","initialAnswer","map","msg","predictRes","predictData","finalAnswer","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSend","disabled","onSendAudio","onClick","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\n\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const sendRequest = async () => {\n    if (!inputMsg.trim()) return;\n\n    const userMessage = { text: inputMsg, fromUser: true };\n    setMessages((prev) => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ history: newHistory }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n\n      const data = await res.json();\n      const answer = data?.result || \"Error: No result received\";\n\n      setMessages((prev) => [...prev, { text: answer, fromUser: false }]);\n      setHistory([...newHistory, answer]);\n      setInputMsg(\"\");\n    } catch (error) {\n      setMessages((prev) => [\n        ...prev,\n        { text: \"Error contacting server\", fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n  };\n\n  const handleSendAudio = async (blob) => {\n    const url = URL.createObjectURL(blob);\n    const audioMessage = { audioUrl: url, fromUser: true };\n    setMessages((prev) => [...prev, audioMessage]);\n    setHistory((prev) => [...prev, \"[Audio message sent]\"]);\n    const formData = new FormData();\n    formData.append(\"audio\", blob);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n\n      const data = await res.json();\n      const transcript = data?.transcript || \"\";\n      const initialAnswer = data?.result || \"\";\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n        )\n      );\n      setMessages((prev) => [\n        ...prev,\n        { text: initialAnswer, fromUser: false },\n      ]);\n      setHistory((prev) => [...prev, initialAnswer]);\n\n      const predictRes = await fetch(\n        `${process.env.REACT_APP_API_URL}/predict`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ history: [...history, transcript] }),\n        }\n      );\n\n      if (!predictRes.ok) throw new Error(\"Server error on predict\");\n\n      const predictData = await predictRes.json();\n      const finalAnswer = predictData?.result || \"Error: No result received\";\n      setMessages((prev) => [...prev, { text: finalAnswer, fromUser: false }]);\n      setHistory((prev) => [...prev, finalAnswer]);\n    } catch (error) {\n      setMessages((prev) => [\n        ...prev,\n        { text: \"Error contacting server\", fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n      <h1>ResQPal Chat</h1>\n      <ChatWindow messages={messages} />\n      <MessageInput\n        inputMsg={inputMsg}\n        setInputMsg={setInputMsg}\n        onSend={sendRequest}\n        disabled={isLoading}\n      />\n      <VoiceRecorder onSendAudio={handleSendAudio} />\n      {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n\n      <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n        Start New Chat\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}