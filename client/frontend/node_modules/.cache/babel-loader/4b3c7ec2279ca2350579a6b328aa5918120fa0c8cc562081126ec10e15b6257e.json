{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\components\\\\Chat\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ChatWindow from \"./ChatWindow\";\nimport MessageInput from \"./MessageInput\";\nimport VoiceRecorder from \"./VoiceRecorder\";\nimport LocationFetcher from \"./LocationFetcher\";\nimport ImageCapture from \"../ImageCapture\";\nimport ChatActions from \"./ChatActions\";\nimport { ChatContext } from \"../../context/ChatContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [lastPrediction, setLastPrediction] = useState(\"\");\n  const {\n    messages,\n    setMessages,\n    inputMsg,\n    setInputMsg,\n    ambulance_flag,\n    setAmbulance_flag,\n    isFinalDecision,\n    setIsFinalDecision,\n    locationSent,\n    setLocationSent,\n    showImageCapture,\n    setShowImageCapture,\n    treatmentParams,\n    setTreatmentParams,\n    history,\n    setHistory\n  } = useContext(ChatContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleLocation = useCallback(async ({\n    lat,\n    lng,\n    address\n  }) => {\n    // setMessages((prev) => [\n    //   ...prev,\n    //   { text: \"I found this location on Google Maps:\", fromUser: false },\n    //   {\n    //     text: `https://maps.google.com/?q=${lat},${lng}`,\n    //     fromUser: false,\n    //     isLink: true,\n    //   },\n    //   { text: \"Is this correct?\", fromUser: false },\n    // ]);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/send_sms`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          coords: {\n            lat,\n            lng\n          },\n          //history: history,\n          prediction: lastPrediction || \"No diagnosis provided.\",\n          message: history.join(\" \") || \"First-aid emergency reported.\"\n        })\n      });\n      if (!res.ok) {\n        let errorText;\n        try {\n          const errorJson = await res.json();\n          errorText = JSON.stringify(errorJson.detail || errorJson);\n        } catch {\n          errorText = await res.text();\n        }\n        setMessages(prev => [...prev, {\n          text: `Error sending SMS: ${errorText}`,\n          fromUser: false\n        }]);\n        return;\n      }\n      const data = await res.json();\n      console.log(\"SMS response:\", data);\n      if (data.sid.status === \"dev_mode\") {\n        setMessages(prev => [...prev, {\n          text: `Development mode: SMS was NOT sent.`,\n          fromUser: false\n        }, {\n          text: `Message content:\\n${data.sid.sent_message}`,\n          fromUser: false\n        }]);\n      } else if (data.sid.status === \"failure\") {\n        setMessages(prev => [...prev, {\n          text: `SMS not sent due to error: ${data.error}`,\n          fromUser: false\n        }, {\n          text: `Please manually send the following message to MDA:\\n${data.manual_message}`,\n          fromUser: false\n        }, {\n          text: `Suggestion: ${data.suggestion}`,\n          fromUser: false\n        }]);\n      } else if (data.sid.status === \"success\") {\n        setMessages(prev => [...prev, {\n          text: `Location sent: ${address || `(${lat.toFixed(5)}, ${lng.toFixed(5)})`}`,\n          fromUser: false\n        }, {\n          text: data.message || \"SMS sent to MDA with your location and details.\",\n          fromUser: false\n        }]);\n        setLocationSent(true);\n      } else {\n        // fallback: show generic message\n        setMessages(prev => [...prev, {\n          text: data.message || \"Unknown response from server.\",\n          fromUser: false\n        }]);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: `❌ Error sending SMS: ${error.message}. Please send location and info to MDA manually.`,\n        fromUser: false\n      }]);\n      console.error(\"Error sending SMS:\", error);\n    }\n  }, [setMessages, setLocationSent, history, lastPrediction]);\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    setMessages(prev => [...prev, {\n      text: inputMsg,\n      fromUser: true\n    }]);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n    setIsLoading(true);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag\n        })\n      });\n      if (!res.ok) throw new Error();\n      const data = await res.json();\n      setMessages(prev => [...prev, {\n        text: data.result,\n        fromUser: false\n      }, ...(data.ambulance_flag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])]);\n      setAmbulance_flag(data.ambulance_flag);\n      setIsFinalDecision(data.has_decision);\n      setInputMsg(\"\");\n      setLastPrediction(data.result);\n      if (data.has_decision) {\n        var _data$degree;\n        setTreatmentParams({\n          caseType: data.result,\n          degree: (_data$degree = data.degree) !== null && _data$degree !== void 0 ? _data$degree : undefined\n        });\n      }\n      if (data.request_image) {\n        setShowImageCapture(true);\n      }\n    } catch {\n      setMessages(prev => [...prev, {\n        text: \"Error contacting server\",\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendAudio = async blob => {\n    const url = URL.createObjectURL(blob);\n    const audioMessage = {\n      audioUrl: url,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, audioMessage]);\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"recording.webm\");\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        const errorText = await res.text();\n        throw new Error(`Server error: ${res.status} ${errorText}`);\n      }\n      const data = await res.json();\n      const transcript = (data === null || data === void 0 ? void 0 : data.transcript) || \"\";\n      setMessages(prev => prev.map(msg => msg.audioUrl === url ? {\n        ...msg,\n        transcript: transcript\n      } : msg));\n      const newHistory = [...history, transcript];\n      const predictRes = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag\n        })\n      });\n      if (!predictRes.ok) {\n        const errorText = await predictRes.text();\n        throw new Error(`Server error on predict: ${predictRes.status} ${errorText}`);\n      }\n      const predictData = await predictRes.json();\n      const finalAnswer = (predictData === null || predictData === void 0 ? void 0 : predictData.result) || \"Error: No result received\";\n      const finalDecisionFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.has_decision) || false;\n      const ambulanceFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.ambulance_flag) || false;\n      setMessages(prev => [...prev, {\n        text: finalAnswer,\n        fromUser: false\n      }, ...(ambulanceFlag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])]);\n      setHistory(newHistory);\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: `Error contacting server: ${error.message}`,\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const newChat = () => {\n    setMessages([]);\n    setInputMsg(\"\");\n    setHistory([]);\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n    setTreatmentParams({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ResQPal Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      inputMsg: inputMsg,\n      setInputMsg: setInputMsg,\n      onSend: sendRequest,\n      disabled: isLoading || isFinalDecision\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), !isFinalDecision && /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n      onSendAudio: handleSendAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 28\n    }, this), ambulance_flag && isFinalDecision && !locationSent && /*#__PURE__*/_jsxDEV(LocationFetcher, {\n      onLocation: handleLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), showImageCapture && /*#__PURE__*/_jsxDEV(ImageCapture, {\n      onCancel: () => setShowImageCapture(false),\n      onCapture: result => {\n        setMessages(prev => [...prev, {\n          text: `Image result: ${result}`,\n          fromUser: false\n        }]);\n        setShowImageCapture(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatActions, {\n      newChat: newChat,\n      treatmentParams: treatmentParams,\n      navigate: navigate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"mVdPoJx/ZGlGoVRj5u20NeCnPGg=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useCallback","useContext","useNavigate","ChatWindow","MessageInput","VoiceRecorder","LocationFetcher","ImageCapture","ChatActions","ChatContext","jsxDEV","_jsxDEV","ChatPage","_s","navigate","lastPrediction","setLastPrediction","messages","setMessages","inputMsg","setInputMsg","ambulance_flag","setAmbulance_flag","isFinalDecision","setIsFinalDecision","locationSent","setLocationSent","showImageCapture","setShowImageCapture","treatmentParams","setTreatmentParams","history","setHistory","isLoading","setIsLoading","handleLocation","lat","lng","address","res","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","coords","prediction","message","join","ok","errorText","errorJson","json","detail","text","prev","fromUser","data","console","log","sid","status","sent_message","error","manual_message","suggestion","toFixed","sendRequest","trim","newHistory","Error","result","isAmbulanceAlert","has_decision","_data$degree","caseType","degree","undefined","request_image","handleSendAudio","blob","url","URL","createObjectURL","audioMessage","audioUrl","formData","FormData","append","transcript","map","msg","predictRes","predictData","finalAnswer","finalDecisionFlag","ambulanceFlag","newChat","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSend","disabled","onSendAudio","onLocation","onCancel","onCapture","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/components/Chat/ChatPage.jsx"],"sourcesContent":["import React, { useState, useCallback, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ChatWindow from \"./ChatWindow\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport VoiceRecorder from \"./VoiceRecorder\";\r\nimport LocationFetcher from \"./LocationFetcher\";\r\nimport ImageCapture from \"../ImageCapture\";\r\nimport ChatActions from \"./ChatActions\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\n\r\nconst ChatPage = () => {\r\n  const navigate = useNavigate();\r\n  const [lastPrediction, setLastPrediction] = useState(\"\");\r\n  const {\r\n    messages,\r\n    setMessages,\r\n    inputMsg,\r\n    setInputMsg,\r\n    ambulance_flag,\r\n    setAmbulance_flag,\r\n    isFinalDecision,\r\n    setIsFinalDecision,\r\n    locationSent,\r\n    setLocationSent,\r\n    showImageCapture,\r\n    setShowImageCapture,\r\n    treatmentParams,\r\n    setTreatmentParams,\r\n    history,\r\n    setHistory,\r\n  } = useContext(ChatContext);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleLocation = useCallback(\r\n    async ({ lat, lng, address }) => {\r\n      // setMessages((prev) => [\r\n      //   ...prev,\r\n      //   { text: \"I found this location on Google Maps:\", fromUser: false },\r\n      //   {\r\n      //     text: `https://maps.google.com/?q=${lat},${lng}`,\r\n      //     fromUser: false,\r\n      //     isLink: true,\r\n      //   },\r\n      //   { text: \"Is this correct?\", fromUser: false },\r\n      // ]);\r\n      try {\r\n        const res = await fetch(`${process.env.REACT_APP_API_URL}/send_sms`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            coords: { lat, lng },\r\n            //history: history,\r\n            prediction: lastPrediction || \"No diagnosis provided.\",\r\n            message: history.join(\" \") || \"First-aid emergency reported.\",\r\n          }),\r\n        });\r\n        if (!res.ok) {\r\n          let errorText;\r\n          try {\r\n            const errorJson = await res.json();\r\n            errorText = JSON.stringify(errorJson.detail || errorJson);\r\n          } catch {\r\n            errorText = await res.text();\r\n          }\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { text: `Error sending SMS: ${errorText}`, fromUser: false },\r\n          ]);\r\n          return;\r\n        }\r\n\r\n        const data = await res.json();\r\n        console.log(\"SMS response:\", data);\r\n\r\n        if (data.sid.status === \"dev_mode\") {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n              text: `Development mode: SMS was NOT sent.`,\r\n              fromUser: false,\r\n            },\r\n            {\r\n              text: `Message content:\\n${data.sid.sent_message}`,\r\n              fromUser: false,\r\n            },\r\n          ]);\r\n        } else if (data.sid.status === \"failure\") {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n              text: `SMS not sent due to error: ${data.error}`,\r\n              fromUser: false,\r\n            },\r\n            {\r\n              text: `Please manually send the following message to MDA:\\n${data.manual_message}`,\r\n              fromUser: false,\r\n            },\r\n            {\r\n              text: `Suggestion: ${data.suggestion}`,\r\n              fromUser: false,\r\n            },\r\n          ]);\r\n        } else if (data.sid.status === \"success\") {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n              text: `Location sent: ${\r\n                address || `(${lat.toFixed(5)}, ${lng.toFixed(5)})`\r\n              }`,\r\n              fromUser: false,\r\n            },\r\n            {\r\n              text:\r\n                data.message ||\r\n                \"SMS sent to MDA with your location and details.\",\r\n              fromUser: false,\r\n            },\r\n          ]);\r\n          setLocationSent(true);\r\n        } else {\r\n          // fallback: show generic message\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            {\r\n              text: data.message || \"Unknown response from server.\",\r\n              fromUser: false,\r\n            },\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          {\r\n            text: `❌ Error sending SMS: ${error.message}. Please send location and info to MDA manually.`,\r\n            fromUser: false,\r\n          },\r\n        ]);\r\n        console.error(\"Error sending SMS:\", error);\r\n      }\r\n    },\r\n    [setMessages, setLocationSent, history, lastPrediction]\r\n  );\r\n  const sendRequest = async () => {\r\n    if (!inputMsg.trim() || isFinalDecision) return;\r\n    setMessages((prev) => [...prev, { text: inputMsg, fromUser: true }]);\r\n    const newHistory = [...history, inputMsg];\r\n    setHistory(newHistory);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ history: newHistory, ambulance_flag }),\r\n      });\r\n      if (!res.ok) throw new Error();\r\n      const data = await res.json();\r\n\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: data.result, fromUser: false },\r\n        ...(data.ambulance_flag\r\n          ? [\r\n              {\r\n                text: \"Ambulance required!\",\r\n                fromUser: false,\r\n                isAmbulanceAlert: true,\r\n              },\r\n            ]\r\n          : []),\r\n      ]);\r\n      setAmbulance_flag(data.ambulance_flag);\r\n      setIsFinalDecision(data.has_decision);\r\n      setInputMsg(\"\");\r\n      setLastPrediction(data.result);\r\n      if (data.has_decision) {\r\n        setTreatmentParams({\r\n          caseType: data.result,\r\n          degree: data.degree ?? undefined,\r\n        });\r\n      }\r\n      if (data.request_image) {\r\n        setShowImageCapture(true);\r\n      }\r\n    } catch {\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: \"Error contacting server\", fromUser: false },\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendAudio = async (blob) => {\r\n    const url = URL.createObjectURL(blob);\r\n    const audioMessage = { audioUrl: url, fromUser: true };\r\n    setMessages((prev) => [...prev, audioMessage]);\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"audio\", blob, \"recording.webm\");\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errorText = await res.text();\r\n        throw new Error(`Server error: ${res.status} ${errorText}`);\r\n      }\r\n\r\n      const data = await res.json();\r\n      const transcript = data?.transcript || \"\";\r\n\r\n      setMessages((prev) =>\r\n        prev.map((msg) =>\r\n          msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\r\n        )\r\n      );\r\n\r\n      const newHistory = [...history, transcript];\r\n      const predictRes = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/predict`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            history: newHistory,\r\n            ambulance_flag: ambulance_flag,\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!predictRes.ok) {\r\n        const errorText = await predictRes.text();\r\n        throw new Error(\r\n          `Server error on predict: ${predictRes.status} ${errorText}`\r\n        );\r\n      }\r\n\r\n      const predictData = await predictRes.json();\r\n      const finalAnswer = predictData?.result || \"Error: No result received\";\r\n      const finalDecisionFlag = predictData?.has_decision || false;\r\n      const ambulanceFlag = predictData?.ambulance_flag || false;\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: finalAnswer, fromUser: false },\r\n        ...(ambulanceFlag\r\n          ? [\r\n              {\r\n                text: \"Ambulance required!\",\r\n                fromUser: false,\r\n                isAmbulanceAlert: true,\r\n              },\r\n            ]\r\n          : []),\r\n      ]);\r\n\r\n      setHistory(newHistory);\r\n      setAmbulance_flag(ambulanceFlag);\r\n      setIsFinalDecision(finalDecisionFlag);\r\n    } catch (error) {\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: `Error contacting server: ${error.message}`, fromUser: false },\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const newChat = () => {\r\n    setMessages([]);\r\n    setInputMsg(\"\");\r\n    setHistory([]);\r\n    setAmbulance_flag(false);\r\n    setIsFinalDecision(false);\r\n    setLocationSent(false);\r\n    setShowImageCapture(false);\r\n    setTreatmentParams({});\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: 600, margin: \"0 auto\", padding: \"2rem\" }}>\r\n      <h1>ResQPal Chat</h1>\r\n      <ChatWindow messages={messages} />\r\n      <MessageInput\r\n        inputMsg={inputMsg}\r\n        setInputMsg={setInputMsg}\r\n        onSend={sendRequest}\r\n        disabled={isLoading || isFinalDecision}\r\n      />\r\n      {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\r\n      {ambulance_flag && isFinalDecision && !locationSent && (\r\n        <LocationFetcher onLocation={handleLocation} \r\n        />\r\n      )}\r\n      {showImageCapture && (\r\n        <ImageCapture\r\n          onCancel={() => setShowImageCapture(false)}\r\n          onCapture={(result) => {\r\n            setMessages((prev) => [\r\n              ...prev,\r\n              { text: `Image result: ${result}`, fromUser: false },\r\n            ]);\r\n            setShowImageCapture(false);\r\n          }}\r\n        />\r\n      )}\r\n      <ChatActions\r\n        newChat={newChat}\r\n        treatmentParams={treatmentParams}\r\n        navigate={navigate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}