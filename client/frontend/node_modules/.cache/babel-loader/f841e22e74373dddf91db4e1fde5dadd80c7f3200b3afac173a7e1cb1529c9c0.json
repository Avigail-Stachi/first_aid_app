{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// //import { FaTrash } from 'react-icons/fa';\n// import { useNavigate, Routes, Route } from \"react-router-dom\";\n\n// import TreatmentScreen from \"./components/TreatmentScreen\";\n\n// import HomeScreen from \"./components/HomeScreen\";\n// import ChatWindow from \"./components/ChatWindow\";\n// import MessageInput from \"./components/MessageInput\";\n// import VoiceRecorder from \"./components/VoiceRecorder\";\n// import LocationFetcher from \"./components/LocationFetcher\";\n// import ImageCapture from \"./components/ImageCapture\";\n// // import Instructions from \"./components/Instructions\";\n// //import Modal from \"./components/Modal\";\n// import \"./App.css\";\n\n// function App() {\n//   const navigate = useNavigate();\n\n//   const [showChat, setShowChat] = useState(false);\n//   const [treatmentParams, setTreatmentParams] = useState(null);\n//   const [inputMsg, setInputMsg] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [history, setHistory] = useState([]);\n//   //const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [ambulance_flag, setAmbulance_flag] = useState(false);\n//   const [isFinalDecision, setIsFinalDecision] = useState(false);\n//   const [locationSent, setLocationSent] = useState(false);\n//   const [showImageCapture, setShowImageCapture] = useState(false);\n//   const [burnsDetected, setBurnsDetected] = useState(null);\n//   // const [showInstructions, setShowInstructions] = useState(false);\n//   // פונקציה זהה בזיכרון בין רינדורים\n//   const handleLocation = useCallback((coords) => {\n//     const { lat, lng } = coords;\n//     const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n//     // שמירה כהודעה בצ'אט\n//     setMessages((prev) => [\n//       ...prev,\n//       {\n//         text: \"I found this location on Google Maps:\",\n//         fromUser: false,\n//       },\n//       {\n//         text: mapsUrl,\n//         fromUser: false,\n//         isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n//       },\n//       {\n//         text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n//         fromUser: false,\n//       },\n//     ]);\n\n//     // שליחה לשרת\n//     fetch(`${process.env.REACT_APP_API_URL}/location`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(coords),\n//     }).catch((err) => console.error(\"Error sending location:\", err));\n\n//     // מונע שליחה חוזרת\n//     setLocationSent(true);\n//   }, []);\n\n//   const sendRequest = async () => {\n//     if (!inputMsg.trim() || isFinalDecision) return;\n//     console.log(5);\n//     const userMessage = { text: inputMsg, fromUser: true };\n//     setMessages((prev) => [...prev, userMessage]);\n//     //setIsModalOpen(true);\n//     const newHistory = [...history, inputMsg];\n//     setHistory(newHistory);\n\n//     try {\n//       setIsLoading(true);\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           history: newHistory,\n//           ambulance_flag: ambulance_flag,\n//         }),\n//       });\n\n//       if (!res.ok) {\n//         throw new Error(\"Server error\");\n//       }\n\n//       const data = await res.json();\n//       const answer = data?.result || \"Error: No result received\";\n//       const ambulanceFlag = data?.ambulance_flag || false;\n//       const finalDecisionFlag = data?.has_decision || false;\n//       if (data?.request_image) {\n//         console.log(\"Server requested an image. Opening camera...\");\n//         setShowImageCapture(true);\n//       }\n//       // if (data.burns_detected) {\n//       //   setBurnsDetected(data.burns_detected);\n//       //   setShowImageCapture(true);\n//       // } else {\n//       //   setBurnsDetected(null);\n//       // }\n//       const newMessages = [\n//         { text: answer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ];\n//       setMessages((prev) => [...prev, ...newMessages]);\n//       // setAmbulance_flag(ambulanceFlag)\n//       // setHistory(newHistory);\n//       setInputMsg(\"\");\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//        if (finalDecisionFlag) {\n//        setTreatmentParams({ caseType: answer, degree: data.degree ?? undefined });\n//     }\n//     } catch (error) {\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: \"Error contacting server\", fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const newChat = () => {\n//     setMessages([]);\n//     setHistory([]);\n//     setInputMsg(\"\");\n//     setAmbulance_flag(false);\n//     setIsFinalDecision(false);\n//     setLocationSent(false);\n//     setShowImageCapture(false);\n//   };\n\n//   const handleSendAudio = async (blob) => {\n//     console.log(\"Audio MIME type:\", blob.type);\n//     console.log(\"Audio size:\", blob.size, \"bytes\");\n\n//     const url = URL.createObjectURL(blob);\n//     const audioMessage = { audioUrl: url, fromUser: true };\n//     setMessages((prev) => [...prev, audioMessage]);\n//     // setHistory((prev) => [...prev, transcript]);\n\n//     const formData = new FormData();\n//     formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n//     try {\n//       setIsLoading(true);\n//       console.log(\n//         \"Sending audio to:\",\n//         `${process.env.REACT_APP_API_URL}/audio`\n//       );\n\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!res.ok) {\n//         const errorText = await res.text();\n//         console.error(\"Server response:\", res.status, errorText);\n//         throw new Error(`Server error: ${res.status} ${errorText}`);\n//       }\n\n//       const data = await res.json();\n//       console.log(\"Server response data:\", data);\n\n//       const transcript = data?.transcript || \"\";\n//       const initialAnswer = data?.result || \"\";\n//       console.log(\"Transcript:\", transcript);\n//       console.log(\"Initial answer:\", initialAnswer);\n\n//       setMessages((prev) =>\n//         prev.map((msg) =>\n//           msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n//         )\n//       );\n//       // setMessages((prev) => [\n//       //   ...prev,\n//       //   { text: initialAnswer, fromUser: false },\n//       // ]);\n//       // setHistory((prev) => [...prev, initialAnswer]);\n\n//       // Send history including the transcript in a separate query\n//       const newHistory = [...history, transcript];\n//       const predictRes = await fetch(\n//         `${process.env.REACT_APP_API_URL}/predict`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             history: newHistory,\n//             ambulance_flag: ambulance_flag,\n//           }),\n//         }\n//       );\n\n//       if (!predictRes.ok) {\n//         const errorText = await predictRes.text();\n//         console.error(\"Predict response:\", predictRes.status, errorText);\n//         throw new Error(\n//           `Server error on predict: ${predictRes.status} ${errorText}`\n//         );\n//       }\n\n//       const predictData = await predictRes.json();\n//       const finalAnswer = predictData?.result || \"Error: No result received\";\n//       const finalDecisionFlag = predictData?.has_decision || false;\n//       const ambulanceFlag = predictData?.ambulance_flag || false;\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: finalAnswer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ]);\n\n//       setHistory(newHistory);\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//     } catch (error) {\n//       console.error(\"Error in handleSendAudio:\", error);\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: `Error contacting server: ${error.message}`, fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   if (!showChat) {\n//     return <HomeScreen onStartChat={() => setShowChat(true)} />;\n//  }\n// //   return (\n// //     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n// //       <h1>ResQPal Chat</h1>\n// //       <ChatWindow messages={messages} />\n// //       <MessageInput\n// //         inputMsg={inputMsg}\n// //         setInputMsg={setInputMsg}\n// //         onSend={sendRequest}\n// //         disabled={isLoading || isFinalDecision}\n// //       />\n// //       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n// //       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n// //       {/* {ambulance_flag && isFinalDecision && (\n// //         <LocationFetcher\n// //           onLocation={(coords) => {\n// //             const { lat, lng } = coords;\n\n// //             // שמירה כהודעה בצ'אט\n// //             setMessages((prev) => [\n// //               ...prev,\n// //               {\n// //                 text: \"Sending your location to emergency services...\",\n// //                 fromUser: false,\n// //               },\n// //               {\n// //                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n// //                 fromUser: true,\n// //               },\n// //             ]);\n\n// //             // שליחה לשרת\n// //             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify(coords),\n// //             }).catch((err) => console.error(\"Error sending location:\", err));\n// //           }}\n// //         />\n// //       )} */}\n// //       {showImageCapture && (\n// //         <ImageCapture\n// //           burnsDetected={burnsDetected}\n// //           onCancel={() => {\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //           }}\n// //           onCapture={(result) => {\n// //             console.log(\"Image capture result:\", result);\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n// //           }}\n// //         />\n// //       )}\n\n// //       {ambulance_flag && isFinalDecision && !locationSent && (\n// //         <LocationFetcher onLocation={handleLocation} />\n// //       )}\n// //       {/* {!showInstructions && (\n// //         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n// //       )} */}\n\n// //       {showInstructions && (\n// //         <Instructions onClose={() => setShowInstructions(false)} />\n// //       )}\n// //       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n// //         Start New Chat\n// //       </button>\n// //     </div>\n// //   );\n// // }\n// // export default App;\n//  return (\n//     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n//       <h1>ResQPal Chat</h1>\n//       <ChatWindow messages={messages} />\n//       <MessageInput\n//         inputMsg={inputMsg}\n//         setInputMsg={setInputMsg}\n//         onSend={sendRequest}\n//         disabled={isLoading || isFinalDecision}\n//       />\n//       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n//       {ambulance_flag && isFinalDecision && !locationSent && <LocationFetcher onLocation={handleLocation} />}\n//       {showImageCapture && (\n//         <ImageCapture\n//           burnsDetected={burnsDetected}\n//           onCancel={() => {\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//           }}\n//           onCapture={(result) => {\n//             setMessages((prev) => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n//             setShowImageCapture(false);\n//           }}\n//         />\n//       )}\n\n//       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n//         Start New Chat\n//       </button>\n\n//       {/* כפתור ניווט להוראות טיפול, מנוטרל עד שיש החלטה סופית */}\n//       <button\n//         onClick={() => navigate(\"/treatment\")}\n//         disabled={!isFinalDecision}\n//         style={{\n//           marginTop: \"1rem\",\n//           marginLeft: \"1rem\",\n//           opacity: isFinalDecision ? 1 : 0.5,\n//           cursor: isFinalDecision ? \"pointer\" : \"not-allowed\",\n//         }}\n//       >\n//         Go to Treatment Instructions\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default function AppWrapper() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/treatment\" element={<TreatmentScreen />} />\n//         <Route path=\"/*\" element={<App />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatPage from \"./components/Chat/ChatPage\";\nimport TreatmentScreen from \"./components/TreatmentScreen\";\nimport \"./App.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const navigate = useNavigate();\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n    setTreatmentParams(null);\n    navigate(\"/chat\");\n  };\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(HomeScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/chat\",\n      element: /*#__PURE__*/_jsxDEV(ChatPage, {\n        inputMsg: inputMsg,\n        setInputMsg: setInputMsg,\n        messages: messages,\n        setMessages: setMessages,\n        history: history,\n        setHistory: setHistory,\n        ambulance_flag: ambulance_flag,\n        setAmbulance_flag: setAmbulance_flag,\n        isFinalDecision: isFinalDecision,\n        setIsFinalDecision: setIsFinalDecision,\n        locationSent: locationSent,\n        setLocationSent: setLocationSent,\n        showImageCapture: showImageCapture,\n        setShowImageCapture: setShowImageCapture,\n        treatmentParams: treatmentParams,\n        setTreatmentParams: setTreatmentParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/treatment\",\n      element: /*#__PURE__*/_jsxDEV(TreatmentScreen, {\n        newChat: newChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"2jtVKB6f/gBNHD3NZv70iFKoHtU=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Routes","Route","HomeScreen","ChatPage","TreatmentScreen","useNavigate","jsxDEV","_jsxDEV","App","_s","navigate","inputMsg","setInputMsg","messages","setMessages","history","setHistory","ambulance_flag","setAmbulance_flag","isFinalDecision","setIsFinalDecision","locationSent","setLocationSent","showImageCapture","setShowImageCapture","treatmentParams","setTreatmentParams","newChat","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/App.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// //import { FaTrash } from 'react-icons/fa';\n// import { useNavigate, Routes, Route } from \"react-router-dom\";\n\n// import TreatmentScreen from \"./components/TreatmentScreen\";\n\n// import HomeScreen from \"./components/HomeScreen\";\n// import ChatWindow from \"./components/ChatWindow\";\n// import MessageInput from \"./components/MessageInput\";\n// import VoiceRecorder from \"./components/VoiceRecorder\";\n// import LocationFetcher from \"./components/LocationFetcher\";\n// import ImageCapture from \"./components/ImageCapture\";\n// // import Instructions from \"./components/Instructions\";\n// //import Modal from \"./components/Modal\";\n// import \"./App.css\";\n\n// function App() {\n//   const navigate = useNavigate();\n\n//   const [showChat, setShowChat] = useState(false);\n//   const [treatmentParams, setTreatmentParams] = useState(null);\n//   const [inputMsg, setInputMsg] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [history, setHistory] = useState([]);\n//   //const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [ambulance_flag, setAmbulance_flag] = useState(false);\n//   const [isFinalDecision, setIsFinalDecision] = useState(false);\n//   const [locationSent, setLocationSent] = useState(false);\n//   const [showImageCapture, setShowImageCapture] = useState(false);\n//   const [burnsDetected, setBurnsDetected] = useState(null);\n//   // const [showInstructions, setShowInstructions] = useState(false);\n//   // פונקציה זהה בזיכרון בין רינדורים\n//   const handleLocation = useCallback((coords) => {\n//     const { lat, lng } = coords;\n//     const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n//     // שמירה כהודעה בצ'אט\n//     setMessages((prev) => [\n//       ...prev,\n//       {\n//         text: \"I found this location on Google Maps:\",\n//         fromUser: false,\n//       },\n//       {\n//         text: mapsUrl,\n//         fromUser: false,\n//         isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n//       },\n//       {\n//         text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n//         fromUser: false,\n//       },\n//     ]);\n\n//     // שליחה לשרת\n//     fetch(`${process.env.REACT_APP_API_URL}/location`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(coords),\n//     }).catch((err) => console.error(\"Error sending location:\", err));\n\n//     // מונע שליחה חוזרת\n//     setLocationSent(true);\n//   }, []);\n\n//   const sendRequest = async () => {\n//     if (!inputMsg.trim() || isFinalDecision) return;\n//     console.log(5);\n//     const userMessage = { text: inputMsg, fromUser: true };\n//     setMessages((prev) => [...prev, userMessage]);\n//     //setIsModalOpen(true);\n//     const newHistory = [...history, inputMsg];\n//     setHistory(newHistory);\n\n//     try {\n//       setIsLoading(true);\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           history: newHistory,\n//           ambulance_flag: ambulance_flag,\n//         }),\n//       });\n\n//       if (!res.ok) {\n//         throw new Error(\"Server error\");\n//       }\n\n//       const data = await res.json();\n//       const answer = data?.result || \"Error: No result received\";\n//       const ambulanceFlag = data?.ambulance_flag || false;\n//       const finalDecisionFlag = data?.has_decision || false;\n//       if (data?.request_image) {\n//         console.log(\"Server requested an image. Opening camera...\");\n//         setShowImageCapture(true);\n//       }\n//       // if (data.burns_detected) {\n//       //   setBurnsDetected(data.burns_detected);\n//       //   setShowImageCapture(true);\n//       // } else {\n//       //   setBurnsDetected(null);\n//       // }\n//       const newMessages = [\n//         { text: answer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ];\n//       setMessages((prev) => [...prev, ...newMessages]);\n//       // setAmbulance_flag(ambulanceFlag)\n//       // setHistory(newHistory);\n//       setInputMsg(\"\");\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//        if (finalDecisionFlag) {\n//        setTreatmentParams({ caseType: answer, degree: data.degree ?? undefined });\n//     }\n//     } catch (error) {\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: \"Error contacting server\", fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const newChat = () => {\n//     setMessages([]);\n//     setHistory([]);\n//     setInputMsg(\"\");\n//     setAmbulance_flag(false);\n//     setIsFinalDecision(false);\n//     setLocationSent(false);\n//     setShowImageCapture(false);\n//   };\n\n//   const handleSendAudio = async (blob) => {\n//     console.log(\"Audio MIME type:\", blob.type);\n//     console.log(\"Audio size:\", blob.size, \"bytes\");\n\n//     const url = URL.createObjectURL(blob);\n//     const audioMessage = { audioUrl: url, fromUser: true };\n//     setMessages((prev) => [...prev, audioMessage]);\n//     // setHistory((prev) => [...prev, transcript]);\n\n//     const formData = new FormData();\n//     formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n//     try {\n//       setIsLoading(true);\n//       console.log(\n//         \"Sending audio to:\",\n//         `${process.env.REACT_APP_API_URL}/audio`\n//       );\n\n//       const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!res.ok) {\n//         const errorText = await res.text();\n//         console.error(\"Server response:\", res.status, errorText);\n//         throw new Error(`Server error: ${res.status} ${errorText}`);\n//       }\n\n//       const data = await res.json();\n//       console.log(\"Server response data:\", data);\n\n//       const transcript = data?.transcript || \"\";\n//       const initialAnswer = data?.result || \"\";\n//       console.log(\"Transcript:\", transcript);\n//       console.log(\"Initial answer:\", initialAnswer);\n\n//       setMessages((prev) =>\n//         prev.map((msg) =>\n//           msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n//         )\n//       );\n//       // setMessages((prev) => [\n//       //   ...prev,\n//       //   { text: initialAnswer, fromUser: false },\n//       // ]);\n//       // setHistory((prev) => [...prev, initialAnswer]);\n\n//       // Send history including the transcript in a separate query\n//       const newHistory = [...history, transcript];\n//       const predictRes = await fetch(\n//         `${process.env.REACT_APP_API_URL}/predict`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             history: newHistory,\n//             ambulance_flag: ambulance_flag,\n//           }),\n//         }\n//       );\n\n//       if (!predictRes.ok) {\n//         const errorText = await predictRes.text();\n//         console.error(\"Predict response:\", predictRes.status, errorText);\n//         throw new Error(\n//           `Server error on predict: ${predictRes.status} ${errorText}`\n//         );\n//       }\n\n//       const predictData = await predictRes.json();\n//       const finalAnswer = predictData?.result || \"Error: No result received\";\n//       const finalDecisionFlag = predictData?.has_decision || false;\n//       const ambulanceFlag = predictData?.ambulance_flag || false;\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: finalAnswer, fromUser: false },\n//         ...(ambulanceFlag\n//           ? [\n//               {\n//                 text: \"Ambulance required!\",\n//                 fromUser: false,\n//                 isAmbulanceAlert: true,\n//               },\n//             ]\n//           : []),\n//       ]);\n\n//       setHistory(newHistory);\n//       setAmbulance_flag(ambulanceFlag);\n//       setIsFinalDecision(finalDecisionFlag);\n//     } catch (error) {\n//       console.error(\"Error in handleSendAudio:\", error);\n//       setMessages((prev) => [\n//         ...prev,\n//         { text: `Error contacting server: ${error.message}`, fromUser: false },\n//       ]);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   if (!showChat) {\n//     return <HomeScreen onStartChat={() => setShowChat(true)} />;\n//  }\n// //   return (\n// //     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n// //       <h1>ResQPal Chat</h1>\n// //       <ChatWindow messages={messages} />\n// //       <MessageInput\n// //         inputMsg={inputMsg}\n// //         setInputMsg={setInputMsg}\n// //         onSend={sendRequest}\n// //         disabled={isLoading || isFinalDecision}\n// //       />\n// //       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n// //       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n// //       {/* {ambulance_flag && isFinalDecision && (\n// //         <LocationFetcher\n// //           onLocation={(coords) => {\n// //             const { lat, lng } = coords;\n\n// //             // שמירה כהודעה בצ'אט\n// //             setMessages((prev) => [\n// //               ...prev,\n// //               {\n// //                 text: \"Sending your location to emergency services...\",\n// //                 fromUser: false,\n// //               },\n// //               {\n// //                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n// //                 fromUser: true,\n// //               },\n// //             ]);\n\n// //             // שליחה לשרת\n// //             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify(coords),\n// //             }).catch((err) => console.error(\"Error sending location:\", err));\n// //           }}\n// //         />\n// //       )} */}\n// //       {showImageCapture && (\n// //         <ImageCapture\n// //           burnsDetected={burnsDetected}\n// //           onCancel={() => {\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //           }}\n// //           onCapture={(result) => {\n// //             console.log(\"Image capture result:\", result);\n// //             setShowImageCapture(false);\n// //             setBurnsDetected(null);\n// //             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n// //           }}\n// //         />\n// //       )}\n\n// //       {ambulance_flag && isFinalDecision && !locationSent && (\n// //         <LocationFetcher onLocation={handleLocation} />\n// //       )}\n// //       {/* {!showInstructions && (\n// //         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n// //       )} */}\n\n// //       {showInstructions && (\n// //         <Instructions onClose={() => setShowInstructions(false)} />\n// //       )}\n// //       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n// //         Start New Chat\n// //       </button>\n// //     </div>\n// //   );\n// // }\n// // export default App;\n//  return (\n//     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n//       <h1>ResQPal Chat</h1>\n//       <ChatWindow messages={messages} />\n//       <MessageInput\n//         inputMsg={inputMsg}\n//         setInputMsg={setInputMsg}\n//         onSend={sendRequest}\n//         disabled={isLoading || isFinalDecision}\n//       />\n//       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n//       {ambulance_flag && isFinalDecision && !locationSent && <LocationFetcher onLocation={handleLocation} />}\n//       {showImageCapture && (\n//         <ImageCapture\n//           burnsDetected={burnsDetected}\n//           onCancel={() => {\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//           }}\n//           onCapture={(result) => {\n//             setMessages((prev) => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n//             setShowImageCapture(false);\n//           }}\n//         />\n//       )}\n\n//       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n//         Start New Chat\n//       </button>\n\n//       {/* כפתור ניווט להוראות טיפול, מנוטרל עד שיש החלטה סופית */}\n//       <button\n//         onClick={() => navigate(\"/treatment\")}\n//         disabled={!isFinalDecision}\n//         style={{\n//           marginTop: \"1rem\",\n//           marginLeft: \"1rem\",\n//           opacity: isFinalDecision ? 1 : 0.5,\n//           cursor: isFinalDecision ? \"pointer\" : \"not-allowed\",\n//         }}\n//       >\n//         Go to Treatment Instructions\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default function AppWrapper() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/treatment\" element={<TreatmentScreen />} />\n//         <Route path=\"/*\" element={<App />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\nimport React, {useState} from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatPage from \"./components/Chat/ChatPage\";\nimport TreatmentScreen from \"./components/TreatmentScreen\";\nimport \"./App.css\";\nimport { useNavigate } from \"react-router-dom\";\nexport default function App() {\n  const navigate = useNavigate();\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n    setTreatmentParams(null);\n    navigate(\"/chat\");\n  };\n\n  return (\n<Routes>\n  <Route path=\"/\" element={<HomeScreen />} />\n  <Route\n    path=\"/chat\"\n    element={\n      <ChatPage\n        inputMsg={inputMsg}\n        setInputMsg={setInputMsg}\n        messages={messages}\n        setMessages={setMessages}\n        history={history}\n        setHistory={setHistory}\n        ambulance_flag={ambulance_flag}\n        setAmbulance_flag={setAmbulance_flag}\n        isFinalDecision={isFinalDecision}\n        setIsFinalDecision={setIsFinalDecision}\n        locationSent={locationSent}\n        setLocationSent={setLocationSent}\n        showImageCapture={showImageCapture}\n        setShowImageCapture={setShowImageCapture}\n        treatmentParams={treatmentParams}\n        setTreatmentParams={setTreatmentParams}\n      />\n    }\n  />\n  <Route\n    path=\"/treatment\"\n    element={<TreatmentScreen newChat={newChat} />}\n  />\n</Routes>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAO,WAAW;AAClB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAM4B,OAAO,GAAGA,CAAA,KAAM;IACpBb,WAAW,CAAC,EAAE,CAAC;IACfE,UAAU,CAAC,EAAE,CAAC;IACdJ,WAAW,CAAC,EAAE,CAAC;IACfM,iBAAiB,CAAC,KAAK,CAAC;IACxBE,kBAAkB,CAAC,KAAK,CAAC;IACzBE,eAAe,CAAC,KAAK,CAAC;IACtBE,mBAAmB,CAAC,KAAK,CAAC;IAC1BE,kBAAkB,CAAC,IAAI,CAAC;IACxBhB,QAAQ,CAAC,OAAO,CAAC;EACnB,CAAC;EAED,oBACFH,OAAA,CAACP,MAAM;IAAA4B,QAAA,gBACLrB,OAAA,CAACN,KAAK;MAAC4B,IAAI,EAAC,GAAG;MAACC,OAAO,eAAEvB,OAAA,CAACL,UAAU;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3C3B,OAAA,CAACN,KAAK;MACJ4B,IAAI,EAAC,OAAO;MACZC,OAAO,eACLvB,OAAA,CAACJ,QAAQ;QACPQ,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA,WAAY;QACzBC,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA,WAAY;QACzBC,OAAO,EAAEA,OAAQ;QACjBC,UAAU,EAAEA,UAAW;QACvBC,cAAc,EAAEA,cAAe;QAC/BC,iBAAiB,EAAEA,iBAAkB;QACrCC,eAAe,EAAEA,eAAgB;QACjCC,kBAAkB,EAAEA,kBAAmB;QACvCC,YAAY,EAAEA,YAAa;QAC3BC,eAAe,EAAEA,eAAgB;QACjCC,gBAAgB,EAAEA,gBAAiB;QACnCC,mBAAmB,EAAEA,mBAAoB;QACzCC,eAAe,EAAEA,eAAgB;QACjCC,kBAAkB,EAAEA;MAAmB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACF3B,OAAA,CAACN,KAAK;MACJ4B,IAAI,EAAC,YAAY;MACjBC,OAAO,eAAEvB,OAAA,CAACH,eAAe;QAACuB,OAAO,EAAEA;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAET;AAACzB,EAAA,CAxDuBD,GAAG;EAAA,QACRH,WAAW;AAAA;AAAA8B,EAAA,GADN3B,GAAG;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}