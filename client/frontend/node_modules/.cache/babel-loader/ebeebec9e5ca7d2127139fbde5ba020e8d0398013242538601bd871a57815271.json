{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\components\\\\ImageCapture.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from \"react\";\n\n// function ImageCapture({ onCapture, onCancel }) {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [stream, setStream] = useState(null);\n\n//   const captureImage = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n//     const context = canvas.getContext(\"2d\");\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     canvas.toBlob(\n//       (blob) => {\n// if (blob) {\n//   sendImageToParent(blob);\n// } else {\n//   console.error(\"Failed to convert canvas to blob\");\n// }\n//       },\n\n//       \"image/jpeg\", 0.95\n//     );\n//   };\n\n//  const sendImageToParent = (blob) => {\n//     const formData = new FormData();\n//     formData.append(\"image\", blob, \"burn.jpg\");\n\n//     console.log(\"Image captured and added to FormData:\", formData);\n//     if (onCapture) onCapture(blob);\n//   };\n\n//   useEffect(() => {\n//     let isMounted = true;\n\n//     const startCamera = async () => {\n//       try {\n//         const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });\n\n//         if (isMounted && videoRef.current) {\n//           videoRef.current.srcObject = mediaStream;\n//           videoRef.current.onloadedmetadata = () => {\n//             videoRef.current.play();\n//           };\n\n//           setStream(mediaStream);\n//         }\n//       } catch (err) {\n//         console.error(\"Error accessing camera:\", err);\n//       }\n//     };\n\n//     startCamera();\n\n//     return () => {\n//       isMounted = false;\n//       if (stream) {\n//         stream.getTracks().forEach((track) => track.stop());\n//       } else if (videoRef.current && videoRef.current.srcObject) {\n//         videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\n//       }\n//     };\n//   }, [stream]);\n\n//   return (\n//     <div>\n//       <video\n//         ref={videoRef}\n//         style={{ width: \"100%\", maxWidth: \"400px\", borderRadius: \"8px\", boxShadow: \"0 0 10px rgba(0,0,0,0.3)\" }}\n//         autoPlay\n//         muted\n//         playsInline\n//       />\n//       <canvas ref={canvasRef} style={{ display: \"none\" }} />\n//       <div style={{ marginTop: \"1rem\", display: \"flex\", gap: \"1rem\" }}>\n//         <button onClick={captureImage}>Take a Picture</button>\n//         <button onClick={onCancel}>Cancel</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ImageCapture;\n// components/ImageCapture.jsx\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageCapture({\n  onCancel\n}) {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const streamRef = useRef(null);\n  const [uploading, setUploading] = useState(false);\n  useEffect(() => {\n    async function startCamera() {\n      try {\n        const mediaStream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        streamRef.current = mediaStream;\n        if (videoRef.current) {\n          videoRef.current.srcObject = mediaStream;\n          await videoRef.current.play();\n        }\n      } catch (err) {\n        console.error(\"Error accessing camera:\", err);\n      }\n    }\n    startCamera();\n    return () => {\n      // ניקוי וסגירת המצלמה כשמתנתקים מהרכיב\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const captureImage = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0);\n    canvas.toBlob(async blob => {\n      if (!blob) return;\n      const formData = new FormData();\n      formData.append(\"image\", blob, \"burn.jpg\");\n      try {\n        setUploading(true);\n        const res = await fetch(`${process.env.REACT_APP_API_URL}/image`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (!res.ok) {\n          const text = await res.text();\n          throw new Error(`Error: ${res.status} ${text}`);\n        }\n        const result = await res.json();\n        console.log(\"Image result:\", result);\n        alert(\"Image sent successfully\");\n\n        // אם תרצי להעביר את התוצאה להורה:\n        // onCapture?.(result);\n      } catch (err) {\n        console.error(\"Error uploading image:\", err);\n        alert(\"Failed to upload image\");\n      } finally {\n        setUploading(false);\n      }\n    }, \"image/jpeg\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      style: {\n        width: \"100%\",\n        maxWidth: \"400px\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.3)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\",\n        display: \"flex\",\n        gap: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: captureImage,\n        disabled: uploading,\n        children: uploading ? \"Uploading...\" : \"Take a Picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageCapture, \"uyUKdFyFJbySPe0iEgGAO3PZB5I=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ImageCapture","onCancel","_s","videoRef","canvasRef","streamRef","uploading","setUploading","startCamera","mediaStream","navigator","mediaDevices","getUserMedia","video","current","srcObject","play","err","console","error","getTracks","forEach","track","stop","captureImage","canvas","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","toBlob","blob","formData","FormData","append","res","fetch","process","env","REACT_APP_API_URL","method","body","ok","text","Error","status","result","json","log","alert","children","ref","autoPlay","muted","playsInline","style","maxWidth","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","display","marginTop","gap","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/components/ImageCapture.jsx"],"sourcesContent":["\r\n// import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n// function ImageCapture({ onCapture, onCancel }) {\r\n//   const videoRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const [stream, setStream] = useState(null);\r\n\r\n//   const captureImage = () => {\r\n//     const video = videoRef.current;\r\n//     const canvas = canvasRef.current;\r\n//     if (!video || !canvas) return;\r\n//     const context = canvas.getContext(\"2d\");\r\n//     canvas.width = video.videoWidth;\r\n//     canvas.height = video.videoHeight;\r\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n//     canvas.toBlob(\r\n//       (blob) => {\r\n// if (blob) {\r\n//   sendImageToParent(blob);\r\n// } else {\r\n//   console.error(\"Failed to convert canvas to blob\");\r\n// }\r\n//       },\r\n\r\n\r\n//       \"image/jpeg\", 0.95\r\n//     );\r\n//   };\r\n\r\n//  const sendImageToParent = (blob) => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"image\", blob, \"burn.jpg\");\r\n\r\n//     console.log(\"Image captured and added to FormData:\", formData);\r\n//     if (onCapture) onCapture(blob);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     let isMounted = true;\r\n\r\n//     const startCamera = async () => {\r\n//       try {\r\n//         const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n\r\n//         if (isMounted && videoRef.current) {\r\n//           videoRef.current.srcObject = mediaStream;\r\n//           videoRef.current.onloadedmetadata = () => {\r\n//             videoRef.current.play();\r\n//           };\r\n\r\n//           setStream(mediaStream);\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error accessing camera:\", err);\r\n//       }\r\n//     };\r\n\r\n//     startCamera();\r\n\r\n//     return () => {\r\n//       isMounted = false;\r\n//       if (stream) {\r\n//         stream.getTracks().forEach((track) => track.stop());\r\n//       } else if (videoRef.current && videoRef.current.srcObject) {\r\n//         videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\r\n//       }\r\n//     };\r\n//   }, [stream]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <video\r\n//         ref={videoRef}\r\n//         style={{ width: \"100%\", maxWidth: \"400px\", borderRadius: \"8px\", boxShadow: \"0 0 10px rgba(0,0,0,0.3)\" }}\r\n//         autoPlay\r\n//         muted\r\n//         playsInline\r\n//       />\r\n//       <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n//       <div style={{ marginTop: \"1rem\", display: \"flex\", gap: \"1rem\" }}>\r\n//         <button onClick={captureImage}>Take a Picture</button>\r\n//         <button onClick={onCancel}>Cancel</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ImageCapture;\r\n// components/ImageCapture.jsx\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nfunction ImageCapture({ onCancel }) {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function startCamera() {\r\n      try {\r\n        const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n          video: true,\r\n        });\r\n        streamRef.current = mediaStream;\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = mediaStream;\r\n          await videoRef.current.play();\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error accessing camera:\", err);\r\n      }\r\n    }\r\n    startCamera();\r\n\r\n    return () => {\r\n      // ניקוי וסגירת המצלמה כשמתנתקים מהרכיב\r\n      if (streamRef.current) {\r\n        streamRef.current.getTracks().forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const captureImage = () => {\r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    if (!video || !canvas) return;\r\n\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(video, 0, 0);\r\n\r\n    canvas.toBlob(async (blob) => {\r\n      if (!blob) return;\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"image\", blob, \"burn.jpg\");\r\n\r\n      try {\r\n        setUploading(true);\r\n        const res = await fetch(`${process.env.REACT_APP_API_URL}/image`, {\r\n          method: \"POST\",\r\n          body: formData,\r\n        });\r\n\r\n        if (!res.ok) {\r\n          const text = await res.text();\r\n          throw new Error(`Error: ${res.status} ${text}`);\r\n        }\r\n\r\n        const result = await res.json();\r\n        console.log(\"Image result:\", result);\r\n        alert(\"Image sent successfully\");\r\n\r\n        // אם תרצי להעביר את התוצאה להורה:\r\n        // onCapture?.(result);\r\n      } catch (err) {\r\n        console.error(\"Error uploading image:\", err);\r\n        alert(\"Failed to upload image\");\r\n      } finally {\r\n        setUploading(false);\r\n      }\r\n    }, \"image/jpeg\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video\r\n        ref={videoRef}\r\n        autoPlay\r\n        muted\r\n        playsInline\r\n        style={{ width: \"100%\", maxWidth: \"400px\", borderRadius: \"8px\", boxShadow: \"0 0 10px rgba(0,0,0,0.3)\" }}\r\n      />\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n      <div style={{ marginTop: \"1rem\", display: \"flex\", gap: \"1rem\" }}>\r\n        <button onClick={captureImage} disabled={uploading}>\r\n          {uploading ? \"Uploading...\" : \"Take a Picture\"}\r\n        </button>\r\n        <button onClick={onCancel}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}