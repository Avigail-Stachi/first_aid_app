{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\n\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  // פונקציה זהה בזיכרון בין רינדורים\n  const handleLocation = useCallback(coords => {\n    const {\n      lat,\n      lng\n    } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    // שמירה כהודעה בצ'אט\n    setMessages(prev => [...prev, {\n      text: \"I found this location on Google Maps:\",\n      fromUser: false\n    }, {\n      text: mapsUrl,\n      fromUser: false,\n      isLink: true // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n    }, {\n      text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n      fromUser: false\n    }]);\n\n    // שליחה לשרת\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(coords)\n    }).catch(err => console.error(\"Error sending location:\", err));\n\n    // מונע שליחה חוזרת\n    setLocationSent(true);\n  }, []);\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    console.log(5);\n    const userMessage = {\n      text: inputMsg,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag\n        })\n      });\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n      const data = await res.json();\n      const answer = (data === null || data === void 0 ? void 0 : data.result) || \"Error: No result received\";\n      const ambulanceFlag = (data === null || data === void 0 ? void 0 : data.ambulance_flag) || false;\n      const finalDecisionFlag = (data === null || data === void 0 ? void 0 : data.has_decision) || false;\n      const newMessages = [{\n        text: answer,\n        fromUser: false\n      }, ...(ambulanceFlag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])];\n      setMessages(prev => [...prev, ...newMessages]);\n      // setAmbulance_flag(ambulanceFlag)\n      // setHistory(newHistory);\n      setInputMsg(\"\");\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Error contacting server\",\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n  };\n  const handleSendAudio = async blob => {\n    console.log(\"Audio MIME type:\", blob.type);\n    console.log(\"Audio size:\", blob.size, \"bytes\");\n    const url = URL.createObjectURL(blob);\n    const audioMessage = {\n      audioUrl: url,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, audioMessage]);\n    // setHistory((prev) => [...prev, transcript]);\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n    try {\n      setIsLoading(true);\n      console.log(\"Sending audio to:\", `${process.env.REACT_APP_API_URL}/audio`);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error(\"Server response:\", res.status, errorText);\n        throw new Error(`Server error: ${res.status} ${errorText}`);\n      }\n      const data = await res.json();\n      console.log(\"Server response data:\", data);\n      const transcript = (data === null || data === void 0 ? void 0 : data.transcript) || \"\";\n      const initialAnswer = (data === null || data === void 0 ? void 0 : data.result) || \"\";\n      console.log(\"Transcript:\", transcript);\n      console.log(\"Initial answer:\", initialAnswer);\n      setMessages(prev => prev.map(msg => msg.audioUrl === url ? {\n        ...msg,\n        transcript: transcript\n      } : msg));\n      // setMessages((prev) => [\n      //   ...prev,\n      //   { text: initialAnswer, fromUser: false },\n      // ]);\n      // setHistory((prev) => [...prev, initialAnswer]);\n\n      // Send history including the transcript in a separate query\n      const newHistory = [...history, transcript];\n      const predictRes = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag\n        })\n      });\n      if (!predictRes.ok) {\n        const errorText = await predictRes.text();\n        console.error(\"Predict response:\", predictRes.status, errorText);\n        throw new Error(`Server error on predict: ${predictRes.status} ${errorText}`);\n      }\n      const predictData = await predictRes.json();\n      const finalAnswer = (predictData === null || predictData === void 0 ? void 0 : predictData.result) || \"Error: No result received\";\n      const finalDecisionFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.has_decision) || false;\n      const ambulanceFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.ambulance_flag) || false;\n      setMessages(prev => [...prev, {\n        text: finalAnswer,\n        fromUser: false\n      }, ...(ambulanceFlag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])]);\n      setHistory(newHistory);\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      console.error(\"Error in handleSendAudio:\", error);\n      setMessages(prev => [...prev, {\n        text: `Error contacting server: ${error.message}`,\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"600px\",\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ResQPal Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      inputMsg: inputMsg,\n      setInputMsg: setInputMsg,\n      onSend: sendRequest,\n      disabled: isLoading || isFinalDecision\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), !isFinalDecision && /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n      onSendAudio: handleSendAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 28\n    }, this), ambulance_flag && isFinalDecision && !locationSent && /*#__PURE__*/_jsxDEV(LocationFetcher, {\n      onLocation: handleLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newChat,\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: \"Start New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mVpzLCXw9pVOV1dJMicPQIQpC24=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ChatWindow","MessageInput","VoiceRecorder","LocationFetcher","jsxDEV","_jsxDEV","App","_s","inputMsg","setInputMsg","messages","setMessages","history","setHistory","isLoading","setIsLoading","ambulance_flag","setAmbulance_flag","isFinalDecision","setIsFinalDecision","locationSent","setLocationSent","handleLocation","coords","lat","lng","mapsUrl","prev","text","fromUser","isLink","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","catch","err","console","error","sendRequest","trim","log","userMessage","newHistory","res","ok","Error","data","json","answer","result","ambulanceFlag","finalDecisionFlag","has_decision","newMessages","isAmbulanceAlert","newChat","handleSendAudio","blob","type","size","url","URL","createObjectURL","audioMessage","audioUrl","formData","FormData","append","errorText","status","transcript","initialAnswer","map","msg","predictRes","predictData","finalAnswer","message","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSend","disabled","onSendAudio","onLocation","onClick","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\n\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  // פונקציה זהה בזיכרון בין רינדורים\n  const handleLocation = useCallback((coords) => {\n    const { lat, lng } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    // שמירה כהודעה בצ'אט\n    setMessages((prev) => [\n      ...prev,\n      {\n        text: \"I found this location on Google Maps:\",\n        fromUser: false,\n      },\n      {\n        text: mapsUrl,\n        fromUser: false,\n        isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n      },\n      {\n        text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n        fromUser: false,\n      },\n    ]);\n\n    // שליחה לשרת\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(coords),\n    }).catch((err) => console.error(\"Error sending location:\", err));\n\n    // מונע שליחה חוזרת\n    setLocationSent(true);\n  }, []);\n\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    console.log(5);\n    const userMessage = { text: inputMsg, fromUser: true };\n    setMessages((prev) => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag,\n        }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n\n      const data = await res.json();\n      const answer = data?.result || \"Error: No result received\";\n      const ambulanceFlag = data?.ambulance_flag || false;\n      const finalDecisionFlag = data?.has_decision || false;\n      const newMessages = [\n        { text: answer, fromUser: false },\n        ...(ambulanceFlag\n          ? [\n              {\n                text: \"Ambulance required!\",\n                fromUser: false,\n                isAmbulanceAlert: true,\n              },\n            ]\n          : []),\n      ];\n      setMessages((prev) => [...prev, ...newMessages]);\n      // setAmbulance_flag(ambulanceFlag)\n      // setHistory(newHistory);\n      setInputMsg(\"\");\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      setMessages((prev) => [\n        ...prev,\n        { text: \"Error contacting server\", fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n  };\n\n  const handleSendAudio = async (blob) => {\n    console.log(\"Audio MIME type:\", blob.type);\n    console.log(\"Audio size:\", blob.size, \"bytes\");\n\n    const url = URL.createObjectURL(blob);\n    const audioMessage = { audioUrl: url, fromUser: true };\n    setMessages((prev) => [...prev, audioMessage]);\n   // setHistory((prev) => [...prev, transcript]);\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n    try {\n      setIsLoading(true);\n      console.log(\n        \"Sending audio to:\",\n        `${process.env.REACT_APP_API_URL}/audio`\n      );\n\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error(\"Server response:\", res.status, errorText);\n        throw new Error(`Server error: ${res.status} ${errorText}`);\n      }\n\n      const data = await res.json();\n      console.log(\"Server response data:\", data);\n\n      const transcript = data?.transcript || \"\";\n      const initialAnswer = data?.result || \"\";\n      console.log(\"Transcript:\", transcript);\n      console.log(\"Initial answer:\", initialAnswer);\n\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n        )\n      );\n      // setMessages((prev) => [\n      //   ...prev,\n      //   { text: initialAnswer, fromUser: false },\n      // ]);\n      // setHistory((prev) => [...prev, initialAnswer]);\n\n      // Send history including the transcript in a separate query\n      const newHistory = [...history, transcript];\n      const predictRes = await fetch(\n        `${process.env.REACT_APP_API_URL}/predict`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            history: newHistory,\n            ambulance_flag: ambulance_flag,\n          }),\n        }\n      );\n\n      if (!predictRes.ok) {\n        const errorText = await predictRes.text();\n        console.error(\"Predict response:\", predictRes.status, errorText);\n        throw new Error(\n          `Server error on predict: ${predictRes.status} ${errorText}`\n        );\n      }\n      \n      const predictData = await predictRes.json();\n      const finalAnswer = predictData?.result || \"Error: No result received\";\n      const finalDecisionFlag = predictData?.has_decision || false;\n      const ambulanceFlag = predictData?.ambulance_flag || false;\n      setMessages((prev) => [\n        ...prev,\n        { text: finalAnswer, fromUser: false },\n        ...(ambulanceFlag\n          ? [\n              {\n                text: \"Ambulance required!\",\n                fromUser: false,\n                isAmbulanceAlert: true,\n              },\n            ]\n          : []),\n      ]);\n\n      setHistory(newHistory);\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      console.error(\"Error in handleSendAudio:\", error);\n      setMessages((prev) => [\n        ...prev,\n        { text: `Error contacting server: ${error.message}`, fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n      <h1>ResQPal Chat</h1>\n      <ChatWindow messages={messages} />\n      <MessageInput\n        inputMsg={inputMsg}\n        setInputMsg={setInputMsg}\n        onSend={sendRequest}\n        disabled={isLoading || isFinalDecision}\n      />\n      {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n      {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n      {/* {ambulance_flag && isFinalDecision && (\n        <LocationFetcher\n          onLocation={(coords) => {\n            const { lat, lng } = coords;\n\n            // שמירה כהודעה בצ'אט\n            setMessages((prev) => [\n              ...prev,\n              {\n                text: \"Sending your location to emergency services...\",\n                fromUser: false,\n              },\n              {\n                text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n                fromUser: true,\n              },\n            ]);\n\n            // שליחה לשרת\n            fetch(`${process.env.REACT_APP_API_URL}/location`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify(coords),\n            }).catch((err) => console.error(\"Error sending location:\", err));\n          }}\n        />\n      )} */}\n      {ambulance_flag && isFinalDecision && !locationSent && (\n        <LocationFetcher onLocation={handleLocation} />\n      )}\n\n      <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n        Start New Chat\n      </button>\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}