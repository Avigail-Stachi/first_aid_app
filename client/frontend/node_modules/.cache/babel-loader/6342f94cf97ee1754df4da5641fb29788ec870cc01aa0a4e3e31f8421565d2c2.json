{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\first_aid_app\\\\client\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\nimport TreatmentScreen from \"./components/TreatmentScreen\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\nimport ImageCapture from \"./components/ImageCapture\";\n// import Instructions from \"./components/Instructions\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const navigate = useNavigate();\n  const [showChat, setShowChat] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [burnsDetected, setBurnsDetected] = useState(null);\n  // const [showInstructions, setShowInstructions] = useState(false);\n  // פונקציה זהה בזיכרון בין רינדורים\n  const handleLocation = useCallback(coords => {\n    const {\n      lat,\n      lng\n    } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    // שמירה כהודעה בצ'אט\n    setMessages(prev => [...prev, {\n      text: \"I found this location on Google Maps:\",\n      fromUser: false\n    }, {\n      text: mapsUrl,\n      fromUser: false,\n      isLink: true // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n    }, {\n      text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n      fromUser: false\n    }]);\n\n    // שליחה לשרת\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(coords)\n    }).catch(err => console.error(\"Error sending location:\", err));\n\n    // מונע שליחה חוזרת\n    setLocationSent(true);\n  }, []);\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    console.log(5);\n    const userMessage = {\n      text: inputMsg,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag\n        })\n      });\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n      const data = await res.json();\n      const answer = (data === null || data === void 0 ? void 0 : data.result) || \"Error: No result received\";\n      const ambulanceFlag = (data === null || data === void 0 ? void 0 : data.ambulance_flag) || false;\n      const finalDecisionFlag = (data === null || data === void 0 ? void 0 : data.has_decision) || false;\n      if (data !== null && data !== void 0 && data.request_image) {\n        console.log(\"Server requested an image. Opening camera...\");\n        setShowImageCapture(true);\n      }\n      // if (data.burns_detected) {\n      //   setBurnsDetected(data.burns_detected);\n      //   setShowImageCapture(true);\n      // } else {\n      //   setBurnsDetected(null);\n      // }\n      const newMessages = [{\n        text: answer,\n        fromUser: false\n      }, ...(ambulanceFlag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])];\n      setMessages(prev => [...prev, ...newMessages]);\n      // setAmbulance_flag(ambulanceFlag)\n      // setHistory(newHistory);\n      setInputMsg(\"\");\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n      if (finalDecisionFlag) {\n        var _data$degree;\n        setTreatmentParams({\n          caseType: answer,\n          degree: (_data$degree = data.degree) !== null && _data$degree !== void 0 ? _data$degree : undefined\n        });\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Error contacting server\",\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n  };\n  const handleSendAudio = async blob => {\n    console.log(\"Audio MIME type:\", blob.type);\n    console.log(\"Audio size:\", blob.size, \"bytes\");\n    const url = URL.createObjectURL(blob);\n    const audioMessage = {\n      audioUrl: url,\n      fromUser: true\n    };\n    setMessages(prev => [...prev, audioMessage]);\n    // setHistory((prev) => [...prev, transcript]);\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n    try {\n      setIsLoading(true);\n      console.log(\"Sending audio to:\", `${process.env.REACT_APP_API_URL}/audio`);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error(\"Server response:\", res.status, errorText);\n        throw new Error(`Server error: ${res.status} ${errorText}`);\n      }\n      const data = await res.json();\n      console.log(\"Server response data:\", data);\n      const transcript = (data === null || data === void 0 ? void 0 : data.transcript) || \"\";\n      const initialAnswer = (data === null || data === void 0 ? void 0 : data.result) || \"\";\n      console.log(\"Transcript:\", transcript);\n      console.log(\"Initial answer:\", initialAnswer);\n      setMessages(prev => prev.map(msg => msg.audioUrl === url ? {\n        ...msg,\n        transcript: transcript\n      } : msg));\n      // setMessages((prev) => [\n      //   ...prev,\n      //   { text: initialAnswer, fromUser: false },\n      // ]);\n      // setHistory((prev) => [...prev, initialAnswer]);\n\n      // Send history including the transcript in a separate query\n      const newHistory = [...history, transcript];\n      const predictRes = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag\n        })\n      });\n      if (!predictRes.ok) {\n        const errorText = await predictRes.text();\n        console.error(\"Predict response:\", predictRes.status, errorText);\n        throw new Error(`Server error on predict: ${predictRes.status} ${errorText}`);\n      }\n      const predictData = await predictRes.json();\n      const finalAnswer = (predictData === null || predictData === void 0 ? void 0 : predictData.result) || \"Error: No result received\";\n      const finalDecisionFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.has_decision) || false;\n      const ambulanceFlag = (predictData === null || predictData === void 0 ? void 0 : predictData.ambulance_flag) || false;\n      setMessages(prev => [...prev, {\n        text: finalAnswer,\n        fromUser: false\n      }, ...(ambulanceFlag ? [{\n        text: \"Ambulance required!\",\n        fromUser: false,\n        isAmbulanceAlert: true\n      }] : [])]);\n      setHistory(newHistory);\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      console.error(\"Error in handleSendAudio:\", error);\n      setMessages(prev => [...prev, {\n        text: `Error contacting server: ${error.message}`,\n        fromUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  if (!showChat) {\n    return /*#__PURE__*/_jsxDEV(HomeScreen, {\n      onStartChat: () => setShowChat(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 12\n    }, this);\n  }\n  //   return (\n  //     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n  //       <h1>ResQPal Chat</h1>\n  //       <ChatWindow messages={messages} />\n  //       <MessageInput\n  //         inputMsg={inputMsg}\n  //         setInputMsg={setInputMsg}\n  //         onSend={sendRequest}\n  //         disabled={isLoading || isFinalDecision}\n  //       />\n  //       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n  //       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n  //       {/* {ambulance_flag && isFinalDecision && (\n  //         <LocationFetcher\n  //           onLocation={(coords) => {\n  //             const { lat, lng } = coords;\n\n  //             // שמירה כהודעה בצ'אט\n  //             setMessages((prev) => [\n  //               ...prev,\n  //               {\n  //                 text: \"Sending your location to emergency services...\",\n  //                 fromUser: false,\n  //               },\n  //               {\n  //                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n  //                 fromUser: true,\n  //               },\n  //             ]);\n\n  //             // שליחה לשרת\n  //             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n  //               method: \"POST\",\n  //               headers: {\n  //                 \"Content-Type\": \"application/json\",\n  //               },\n  //               body: JSON.stringify(coords),\n  //             }).catch((err) => console.error(\"Error sending location:\", err));\n  //           }}\n  //         />\n  //       )} */}\n  //       {showImageCapture && (\n  //         <ImageCapture\n  //           burnsDetected={burnsDetected}\n  //           onCancel={() => {\n  //             setShowImageCapture(false);\n  //             setBurnsDetected(null);\n  //           }}\n  //           onCapture={(result) => {\n  //             console.log(\"Image capture result:\", result);\n  //             setShowImageCapture(false);\n  //             setBurnsDetected(null);\n  //             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n  //           }}\n  //         />\n  //       )}\n\n  //       {ambulance_flag && isFinalDecision && !locationSent && (\n  //         <LocationFetcher onLocation={handleLocation} />\n  //       )}\n  //       {/* {!showInstructions && (\n  //         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n  //       )} */}\n\n  //       {showInstructions && (\n  //         <Instructions onClose={() => setShowInstructions(false)} />\n  //       )}\n  //       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n  //         Start New Chat\n  //       </button>\n  //     </div>\n  //   );\n  // }\n  // export default App;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"600px\",\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ResQPal Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      inputMsg: inputMsg,\n      setInputMsg: setInputMsg,\n      onSend: sendRequest,\n      disabled: isLoading || isFinalDecision\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), !isFinalDecision && /*#__PURE__*/_jsxDEV(VoiceRecorder, {\n      onSendAudio: handleSendAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 28\n    }, this), ambulance_flag && isFinalDecision && !locationSent && /*#__PURE__*/_jsxDEV(LocationFetcher, {\n      onLocation: handleLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 62\n    }, this), showImageCapture && /*#__PURE__*/_jsxDEV(ImageCapture, {\n      burnsDetected: burnsDetected,\n      onCancel: () => {\n        setShowImageCapture(false);\n        setBurnsDetected(null);\n      },\n      onCapture: result => {\n        setMessages(prev => [...prev, {\n          text: `Image result: ${result}`,\n          fromUser: false\n        }]);\n        setShowImageCapture(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newChat,\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: \"Start New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/treatment\"),\n      disabled: !isFinalDecision,\n      style: {\n        marginTop: \"1rem\",\n        marginLeft: \"1rem\",\n        opacity: isFinalDecision ? 1 : 0.5,\n        cursor: isFinalDecision ? \"pointer\" : \"not-allowed\"\n      },\n      children: \"Go to Treatment Instructions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"U+3OhLWy6NZre3AiQTzHiO4PXpQ=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default function AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/treatment\",\n        element: /*#__PURE__*/_jsxDEV(TreatmentScreen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/*\",\n        element: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AppWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useCallback","useNavigate","Routes","Route","TreatmentScreen","HomeScreen","ChatWindow","MessageInput","VoiceRecorder","LocationFetcher","ImageCapture","jsxDEV","_jsxDEV","App","_s","navigate","showChat","setShowChat","treatmentParams","setTreatmentParams","inputMsg","setInputMsg","messages","setMessages","history","setHistory","isLoading","setIsLoading","ambulance_flag","setAmbulance_flag","isFinalDecision","setIsFinalDecision","locationSent","setLocationSent","showImageCapture","setShowImageCapture","burnsDetected","setBurnsDetected","handleLocation","coords","lat","lng","mapsUrl","prev","text","fromUser","isLink","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","catch","err","console","error","sendRequest","trim","log","userMessage","newHistory","res","ok","Error","data","json","answer","result","ambulanceFlag","finalDecisionFlag","has_decision","request_image","newMessages","isAmbulanceAlert","_data$degree","caseType","degree","undefined","newChat","handleSendAudio","blob","type","size","url","URL","createObjectURL","audioMessage","audioUrl","formData","FormData","append","errorText","status","transcript","initialAnswer","map","msg","predictRes","predictData","finalAnswer","message","onStartChat","fileName","_jsxFileName","lineNumber","columnNumber","style","maxWidth","margin","padding","children","onSend","disabled","onSendAudio","onLocation","onCancel","onCapture","onClick","marginTop","marginLeft","opacity","cursor","_c","AppWrapper","Router","path","element","_c2","$RefreshReg$"],"sources":["C:/Users/User/Documents/first_aid_app/client/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\n//import { FaTrash } from 'react-icons/fa';\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\n\nimport TreatmentScreen from \"./components/TreatmentScreen\";\n\nimport HomeScreen from \"./components/HomeScreen\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport MessageInput from \"./components/MessageInput\";\nimport VoiceRecorder from \"./components/VoiceRecorder\";\nimport LocationFetcher from \"./components/LocationFetcher\";\nimport ImageCapture from \"./components/ImageCapture\";\n// import Instructions from \"./components/Instructions\";\n//import Modal from \"./components/Modal\";\nimport \"./App.css\";\n\nfunction App() {\n  const navigate = useNavigate();\n  \n  const [showChat, setShowChat] = useState(false);\n  const [treatmentParams, setTreatmentParams] = useState(null);\n  const [inputMsg, setInputMsg] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [history, setHistory] = useState([]);\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ambulance_flag, setAmbulance_flag] = useState(false);\n  const [isFinalDecision, setIsFinalDecision] = useState(false);\n  const [locationSent, setLocationSent] = useState(false);\n  const [showImageCapture, setShowImageCapture] = useState(false);\n  const [burnsDetected, setBurnsDetected] = useState(null);\n  // const [showInstructions, setShowInstructions] = useState(false);\n  // פונקציה זהה בזיכרון בין רינדורים\n  const handleLocation = useCallback((coords) => {\n    const { lat, lng } = coords;\n    const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;\n    // שמירה כהודעה בצ'אט\n    setMessages((prev) => [\n      ...prev,\n      {\n        text: \"I found this location on Google Maps:\",\n        fromUser: false,\n      },\n      {\n        text: mapsUrl,\n        fromUser: false,\n        isLink: true, // אם תרצי, תעבירי flag כדי לטעון אותו כרכיב <a>\n      },\n      {\n        text: \"Is this correct? If not, please enter your address or coordinates manually.\",\n        fromUser: false,\n      },\n    ]);\n\n    // שליחה לשרת\n    fetch(`${process.env.REACT_APP_API_URL}/location`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(coords),\n    }).catch((err) => console.error(\"Error sending location:\", err));\n\n    // מונע שליחה חוזרת\n    setLocationSent(true);\n  }, []);\n\n  const sendRequest = async () => {\n    if (!inputMsg.trim() || isFinalDecision) return;\n    console.log(5);\n    const userMessage = { text: inputMsg, fromUser: true };\n    setMessages((prev) => [...prev, userMessage]);\n    //setIsModalOpen(true);\n    const newHistory = [...history, inputMsg];\n    setHistory(newHistory);\n\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: newHistory,\n          ambulance_flag: ambulance_flag,\n        }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Server error\");\n      }\n\n      const data = await res.json();\n      const answer = data?.result || \"Error: No result received\";\n      const ambulanceFlag = data?.ambulance_flag || false;\n      const finalDecisionFlag = data?.has_decision || false;\n      if (data?.request_image) {\n        console.log(\"Server requested an image. Opening camera...\");\n        setShowImageCapture(true);\n      }\n      // if (data.burns_detected) {\n      //   setBurnsDetected(data.burns_detected);\n      //   setShowImageCapture(true);\n      // } else {\n      //   setBurnsDetected(null);\n      // }\n      const newMessages = [\n        { text: answer, fromUser: false },\n        ...(ambulanceFlag\n          ? [\n              {\n                text: \"Ambulance required!\",\n                fromUser: false,\n                isAmbulanceAlert: true,\n              },\n            ]\n          : []),\n      ];\n      setMessages((prev) => [...prev, ...newMessages]);\n      // setAmbulance_flag(ambulanceFlag)\n      // setHistory(newHistory);\n      setInputMsg(\"\");\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n       if (finalDecisionFlag) {\n       setTreatmentParams({ caseType: answer, degree: data.degree ?? undefined });\n    }\n    } catch (error) {\n      setMessages((prev) => [\n        ...prev,\n        { text: \"Error contacting server\", fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const newChat = () => {\n    setMessages([]);\n    setHistory([]);\n    setInputMsg(\"\");\n    setAmbulance_flag(false);\n    setIsFinalDecision(false);\n    setLocationSent(false);\n    setShowImageCapture(false);\n  };\n\n  const handleSendAudio = async (blob) => {\n    console.log(\"Audio MIME type:\", blob.type);\n    console.log(\"Audio size:\", blob.size, \"bytes\");\n\n    const url = URL.createObjectURL(blob);\n    const audioMessage = { audioUrl: url, fromUser: true };\n    setMessages((prev) => [...prev, audioMessage]);\n    // setHistory((prev) => [...prev, transcript]);\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"recording.webm\"); // Give a filename with extension\n\n    try {\n      setIsLoading(true);\n      console.log(\n        \"Sending audio to:\",\n        `${process.env.REACT_APP_API_URL}/audio`\n      );\n\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/audio`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        const errorText = await res.text();\n        console.error(\"Server response:\", res.status, errorText);\n        throw new Error(`Server error: ${res.status} ${errorText}`);\n      }\n\n      const data = await res.json();\n      console.log(\"Server response data:\", data);\n\n      const transcript = data?.transcript || \"\";\n      const initialAnswer = data?.result || \"\";\n      console.log(\"Transcript:\", transcript);\n      console.log(\"Initial answer:\", initialAnswer);\n\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.audioUrl === url ? { ...msg, transcript: transcript } : msg\n        )\n      );\n      // setMessages((prev) => [\n      //   ...prev,\n      //   { text: initialAnswer, fromUser: false },\n      // ]);\n      // setHistory((prev) => [...prev, initialAnswer]);\n\n      // Send history including the transcript in a separate query\n      const newHistory = [...history, transcript];\n      const predictRes = await fetch(\n        `${process.env.REACT_APP_API_URL}/predict`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            history: newHistory,\n            ambulance_flag: ambulance_flag,\n          }),\n        }\n      );\n\n      if (!predictRes.ok) {\n        const errorText = await predictRes.text();\n        console.error(\"Predict response:\", predictRes.status, errorText);\n        throw new Error(\n          `Server error on predict: ${predictRes.status} ${errorText}`\n        );\n      }\n\n      const predictData = await predictRes.json();\n      const finalAnswer = predictData?.result || \"Error: No result received\";\n      const finalDecisionFlag = predictData?.has_decision || false;\n      const ambulanceFlag = predictData?.ambulance_flag || false;\n      setMessages((prev) => [\n        ...prev,\n        { text: finalAnswer, fromUser: false },\n        ...(ambulanceFlag\n          ? [\n              {\n                text: \"Ambulance required!\",\n                fromUser: false,\n                isAmbulanceAlert: true,\n              },\n            ]\n          : []),\n      ]);\n\n      setHistory(newHistory);\n      setAmbulance_flag(ambulanceFlag);\n      setIsFinalDecision(finalDecisionFlag);\n    } catch (error) {\n      console.error(\"Error in handleSendAudio:\", error);\n      setMessages((prev) => [\n        ...prev,\n        { text: `Error contacting server: ${error.message}`, fromUser: false },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!showChat) {\n    return <HomeScreen onStartChat={() => setShowChat(true)} />;\n }\n//   return (\n//     <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n//       <h1>ResQPal Chat</h1>\n//       <ChatWindow messages={messages} />\n//       <MessageInput\n//         inputMsg={inputMsg}\n//         setInputMsg={setInputMsg}\n//         onSend={sendRequest}\n//         disabled={isLoading || isFinalDecision}\n//       />\n//       {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n//       {/* <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} /> */}\n//       {/* {ambulance_flag && isFinalDecision && (\n//         <LocationFetcher\n//           onLocation={(coords) => {\n//             const { lat, lng } = coords;\n\n//             // שמירה כהודעה בצ'אט\n//             setMessages((prev) => [\n//               ...prev,\n//               {\n//                 text: \"Sending your location to emergency services...\",\n//                 fromUser: false,\n//               },\n//               {\n//                 text: `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n//                 fromUser: true,\n//               },\n//             ]);\n\n//             // שליחה לשרת\n//             fetch(`${process.env.REACT_APP_API_URL}/location`, {\n//               method: \"POST\",\n//               headers: {\n//                 \"Content-Type\": \"application/json\",\n//               },\n//               body: JSON.stringify(coords),\n//             }).catch((err) => console.error(\"Error sending location:\", err));\n//           }}\n//         />\n//       )} */}\n//       {showImageCapture && (\n//         <ImageCapture\n//           burnsDetected={burnsDetected}\n//           onCancel={() => {\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//           }}\n//           onCapture={(result) => {\n//             console.log(\"Image capture result:\", result);\n//             setShowImageCapture(false);\n//             setBurnsDetected(null);\n//             // כאן תוכל להוסיף לוגיקה נוספת אם תרצה\n//           }}\n//         />\n//       )}\n\n//       {ambulance_flag && isFinalDecision && !locationSent && (\n//         <LocationFetcher onLocation={handleLocation} />\n//       )}\n//       {/* {!showInstructions && (\n//         <button onClick={() => setShowInstructions(true)}>What to do?</button>\n//       )} */}\n\n//       {showInstructions && (\n//         <Instructions onClose={() => setShowInstructions(false)} />\n//       )}\n//       <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n//         Start New Chat\n//       </button>\n//     </div>\n//   );\n// }\n// export default App;\n return (\n    <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: \"2rem\" }}>\n      <h1>ResQPal Chat</h1>\n      <ChatWindow messages={messages} />\n      <MessageInput\n        inputMsg={inputMsg}\n        setInputMsg={setInputMsg}\n        onSend={sendRequest}\n        disabled={isLoading || isFinalDecision}\n      />\n      {!isFinalDecision && <VoiceRecorder onSendAudio={handleSendAudio} />}\n      {ambulance_flag && isFinalDecision && !locationSent && <LocationFetcher onLocation={handleLocation} />}\n      {showImageCapture && (\n        <ImageCapture\n          burnsDetected={burnsDetected}\n          onCancel={() => {\n            setShowImageCapture(false);\n            setBurnsDetected(null);\n          }}\n          onCapture={(result) => {\n            setMessages((prev) => [...prev, { text: `Image result: ${result}`, fromUser: false }]);\n            setShowImageCapture(false);\n          }}\n        />\n      )}\n\n      <button onClick={newChat} style={{ marginTop: \"1rem\" }}>\n        Start New Chat\n      </button>\n\n      {/* כפתור ניווט להוראות טיפול, מנוטרל עד שיש החלטה סופית */}\n      <button\n        onClick={() => navigate(\"/treatment\")}\n        disabled={!isFinalDecision}\n        style={{\n          marginTop: \"1rem\",\n          marginLeft: \"1rem\",\n          opacity: isFinalDecision ? 1 : 0.5,\n          cursor: isFinalDecision ? \"pointer\" : \"not-allowed\",\n        }}\n      >\n        Go to Treatment Instructions\n      </button>\n    </div>\n  );\n}\n\nexport default function AppWrapper() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/treatment\" element={<TreatmentScreen />} />\n        <Route path=\"/*\" element={<App />} />\n      </Routes>\n    </Router>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}